//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by SlSvcUtil, version 5.0.61118.0
// 
namespace OMGITWebServices
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OMGLoginData", Namespace="http://schemas.datacontract.org/2004/07/OMGITWebServices")]
    public partial class OMGLoginData : object
    {
        
        private bool ActionFlagField;
        
        private string AltitudeField;
        
        private bool CreateAuthTokenField;
        
        private int ExtendableBitMaskField;
        
        private string LatitudeField;
        
        private string LongitudeField;
        
        private string MobilePlatformField;
        
        private string OMGAppIDField;
        
        private string PasswordField;
        
        private string PhoneIdentifierField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ActionFlag
        {
            get
            {
                return this.ActionFlagField;
            }
            set
            {
                this.ActionFlagField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Altitude
        {
            get
            {
                return this.AltitudeField;
            }
            set
            {
                this.AltitudeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CreateAuthToken
        {
            get
            {
                return this.CreateAuthTokenField;
            }
            set
            {
                this.CreateAuthTokenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExtendableBitMask
        {
            get
            {
                return this.ExtendableBitMaskField;
            }
            set
            {
                this.ExtendableBitMaskField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Latitude
        {
            get
            {
                return this.LatitudeField;
            }
            set
            {
                this.LatitudeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Longitude
        {
            get
            {
                return this.LongitudeField;
            }
            set
            {
                this.LongitudeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MobilePlatform
        {
            get
            {
                return this.MobilePlatformField;
            }
            set
            {
                this.MobilePlatformField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OMGAppID
        {
            get
            {
                return this.OMGAppIDField;
            }
            set
            {
                this.OMGAppIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneIdentifier
        {
            get
            {
                return this.PhoneIdentifierField;
            }
            set
            {
                this.PhoneIdentifierField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OMGReturnMessage", Namespace="http://schemas.datacontract.org/2004/07/OMGITWebServices")]
    public partial class OMGReturnMessage : object
    {
        
        private string AuthTokenField;
        
        private int ErrorCodeField;
        
        private string ErrorMessageField;
        
        private int ExtendableBitMaskField;
        
        private bool SuccessField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthToken
        {
            get
            {
                return this.AuthTokenField;
            }
            set
            {
                this.AuthTokenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorCode
        {
            get
            {
                return this.ErrorCodeField;
            }
            set
            {
                this.ErrorCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage
        {
            get
            {
                return this.ErrorMessageField;
            }
            set
            {
                this.ErrorMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExtendableBitMask
        {
            get
            {
                return this.ExtendableBitMaskField;
            }
            set
            {
                this.ExtendableBitMaskField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success
        {
            get
            {
                return this.SuccessField;
            }
            set
            {
                this.SuccessField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OMGInstallationData", Namespace="http://schemas.datacontract.org/2004/07/OMGITWebServices")]
    public partial class OMGInstallationData : object
    {
        
        private string DeviceTokenField;
        
        private int ExtendableBitMaskField;
        
        private string OperatingSystemField;
        
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceToken
        {
            get
            {
                return this.DeviceTokenField;
            }
            set
            {
                this.DeviceTokenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExtendableBitMask
        {
            get
            {
                return this.ExtendableBitMaskField;
            }
            set
            {
                this.ExtendableBitMaskField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperatingSystem
        {
            get
            {
                return this.OperatingSystemField;
            }
            set
            {
                this.OperatingSystemField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username
        {
            get
            {
                return this.UsernameField;
            }
            set
            {
                this.UsernameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OMGAdminTestSendData", Namespace="http://schemas.datacontract.org/2004/07/OMGITWebServices")]
    public partial class OMGAdminTestSendData : object
    {
        
        private int ExtendableBitMaskField;
        
        private string MessageField;
        
        private string OperatingSystemField;
        
        private string TagField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExtendableBitMask
        {
            get
            {
                return this.ExtendableBitMaskField;
            }
            set
            {
                this.ExtendableBitMaskField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperatingSystem
        {
            get
            {
                return this.OperatingSystemField;
            }
            set
            {
                this.OperatingSystemField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tag
        {
            get
            {
                return this.TagField;
            }
            set
            {
                this.TagField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OMGAuthTokenData", Namespace="http://schemas.datacontract.org/2004/07/OMGITWebServices")]
    public partial class OMGAuthTokenData : object
    {
        
        private bool ActionFlagField;
        
        private string AuthTokenField;
        
        private int ExtendableBitMaskField;
        
        private string MobilePlatformField;
        
        private string OMGAppIDField;
        
        private string PhoneIdentifierField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ActionFlag
        {
            get
            {
                return this.ActionFlagField;
            }
            set
            {
                this.ActionFlagField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthToken
        {
            get
            {
                return this.AuthTokenField;
            }
            set
            {
                this.AuthTokenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExtendableBitMask
        {
            get
            {
                return this.ExtendableBitMaskField;
            }
            set
            {
                this.ExtendableBitMaskField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MobilePlatform
        {
            get
            {
                return this.MobilePlatformField;
            }
            set
            {
                this.MobilePlatformField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OMGAppID
        {
            get
            {
                return this.OMGAppIDField;
            }
            set
            {
                this.OMGAppIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneIdentifier
        {
            get
            {
                return this.PhoneIdentifierField;
            }
            set
            {
                this.PhoneIdentifierField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OMGNotifyCarrierTextMapping", Namespace="http://schemas.datacontract.org/2004/07/OMGITWebServices")]
    public partial class OMGNotifyCarrierTextMapping : object
    {
        
        private string CarrierDisplayNameField;
        
        private string CarrierTextEmailBridgeField;
        
        private int TableIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CarrierDisplayName
        {
            get
            {
                return this.CarrierDisplayNameField;
            }
            set
            {
                this.CarrierDisplayNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CarrierTextEmailBridge
        {
            get
            {
                return this.CarrierTextEmailBridgeField;
            }
            set
            {
                this.CarrierTextEmailBridgeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TableID
        {
            get
            {
                return this.TableIDField;
            }
            set
            {
                this.TableIDField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OMGNotifyUserOptInSettings", Namespace="http://schemas.datacontract.org/2004/07/OMGITWebServices")]
    public partial class OMGNotifyUserOptInSettings : object
    {
        
        private int CarrierIDField;
        
        private string CellPhoneNumberField;
        
        private string EmailAddressField;
        
        private int EmailOKField;
        
        private int TextMessagingOKField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CarrierID
        {
            get
            {
                return this.CarrierIDField;
            }
            set
            {
                this.CarrierIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CellPhoneNumber
        {
            get
            {
                return this.CellPhoneNumberField;
            }
            set
            {
                this.CellPhoneNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailAddress
        {
            get
            {
                return this.EmailAddressField;
            }
            set
            {
                this.EmailAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmailOK
        {
            get
            {
                return this.EmailOKField;
            }
            set
            {
                this.EmailOKField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TextMessagingOK
        {
            get
            {
                return this.TextMessagingOKField;
            }
            set
            {
                this.TextMessagingOKField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OMGLocationNotificationMessage", Namespace="http://schemas.datacontract.org/2004/07/OMGITWebServices")]
    public partial class OMGLocationNotificationMessage : object
    {
        
        private int ClinicIDField;
        
        private string MessageField;
        
        private string SubjectField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClinicID
        {
            get
            {
                return this.ClinicIDField;
            }
            set
            {
                this.ClinicIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject
        {
            get
            {
                return this.SubjectField;
            }
            set
            {
                this.SubjectField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OMGPushNotificationSendData", Namespace="http://schemas.datacontract.org/2004/07/OMGITWebServices")]
    public partial class OMGPushNotificationSendData : object
    {
        
        private int ExtendableBitMaskField;
        
        private string MessageField;
        
        private string OperatingSystemField;
        
        private string TagField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExtendableBitMask
        {
            get
            {
                return this.ExtendableBitMaskField;
            }
            set
            {
                this.ExtendableBitMaskField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperatingSystem
        {
            get
            {
                return this.OperatingSystemField;
            }
            set
            {
                this.OperatingSystemField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tag
        {
            get
            {
                return this.TagField;
            }
            set
            {
                this.TagField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OMGUserSignupReportRow", Namespace="http://schemas.datacontract.org/2004/07/OMGITWebServices")]
    public partial class OMGUserSignupReportRow : object
    {
        
        private string ClinicNameField;
        
        private string EmployeeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClinicName
        {
            get
            {
                return this.ClinicNameField;
            }
            set
            {
                this.ClinicNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmployeeName
        {
            get
            {
                return this.EmployeeNameField;
            }
            set
            {
                this.EmployeeNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OMGUserNotificationHistoryRow", Namespace="http://schemas.datacontract.org/2004/07/OMGITWebServices")]
    public partial class OMGUserNotificationHistoryRow : object
    {
        
        private string EmailAddressField;
        
        private string SendTimeField;
        
        private string SenderUserNameField;
        
        private string SentToUserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailAddress
        {
            get
            {
                return this.EmailAddressField;
            }
            set
            {
                this.EmailAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SendTime
        {
            get
            {
                return this.SendTimeField;
            }
            set
            {
                this.SendTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderUserName
        {
            get
            {
                return this.SenderUserNameField;
            }
            set
            {
                this.SenderUserNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SentToUserName
        {
            get
            {
                return this.SentToUserNameField;
            }
            set
            {
                this.SentToUserNameField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IOMGITService")]
public interface IOMGITService
{
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/Login", ReplyAction="http://tempuri.org/IOMGITService/LoginResponse")]
    System.IAsyncResult BeginLogin(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState);
    
    OMGITWebServices.OMGReturnMessage EndLogin(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/Logout", ReplyAction="http://tempuri.org/IOMGITService/LogoutResponse")]
    System.IAsyncResult BeginLogout(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState);
    
    OMGITWebServices.OMGReturnMessage EndLogout(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/RegisterForNotifications", ReplyAction="http://tempuri.org/IOMGITService/RegisterForNotificationsResponse")]
    System.IAsyncResult BeginRegisterForNotifications(OMGITWebServices.OMGInstallationData name, System.AsyncCallback callback, object asyncState);
    
    OMGITWebServices.OMGReturnMessage EndRegisterForNotifications(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/TestSendNotification", ReplyAction="http://tempuri.org/IOMGITService/TestSendNotificationResponse")]
    System.IAsyncResult BeginTestSendNotification(OMGITWebServices.OMGAdminTestSendData name, System.AsyncCallback callback, object asyncState);
    
    OMGITWebServices.OMGReturnMessage EndTestSendNotification(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/ValidateAuthenticationToken", ReplyAction="http://tempuri.org/IOMGITService/ValidateAuthenticationTokenResponse")]
    System.IAsyncResult BeginValidateAuthenticationToken(OMGITWebServices.OMGAuthTokenData name, System.AsyncCallback callback, object asyncState);
    
    OMGITWebServices.OMGReturnMessage EndValidateAuthenticationToken(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/AddLogMessageTickerApp", ReplyAction="http://tempuri.org/IOMGITService/AddLogMessageTickerAppResponse")]
    System.IAsyncResult BeginAddLogMessageTickerApp(string logmessage, string msgdetail, System.AsyncCallback callback, object asyncState);
    
    void EndAddLogMessageTickerApp(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/GetRecentMessages", ReplyAction="http://tempuri.org/IOMGITService/GetRecentMessagesResponse")]
    System.IAsyncResult BeginGetRecentMessages(System.AsyncCallback callback, object asyncState);
    
    string[] EndGetRecentMessages(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/GetValidSendLocations", ReplyAction="http://tempuri.org/IOMGITService/GetValidSendLocationsResponse")]
    System.IAsyncResult BeginGetValidSendLocations(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState);
    
    System.Collections.Generic.Dictionary<int, string> EndGetValidSendLocations(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/GetValidLocations", ReplyAction="http://tempuri.org/IOMGITService/GetValidLocationsResponse")]
    System.IAsyncResult BeginGetValidLocations(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState);
    
    System.Collections.Generic.Dictionary<int, string> EndGetValidLocations(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/GetCarrierTextMappings", ReplyAction="http://tempuri.org/IOMGITService/GetCarrierTextMappingsResponse")]
    System.IAsyncResult BeginGetCarrierTextMappings(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState);
    
    System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGNotifyCarrierTextMapping> EndGetCarrierTextMappings(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/GetUserOptInSettings", ReplyAction="http://tempuri.org/IOMGITService/GetUserOptInSettingsResponse")]
    System.IAsyncResult BeginGetUserOptInSettings(string NotifyUserName, OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState);
    
    OMGITWebServices.OMGNotifyUserOptInSettings EndGetUserOptInSettings(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/GetExternalUserOptInSettings", ReplyAction="http://tempuri.org/IOMGITService/GetExternalUserOptInSettingsResponse")]
    System.IAsyncResult BeginGetExternalUserOptInSettings(string NotifyUserName, OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState);
    
    OMGITWebServices.OMGNotifyUserOptInSettings EndGetExternalUserOptInSettings(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/AddUpdateUserOptInSettings", ReplyAction="http://tempuri.org/IOMGITService/AddUpdateUserOptInSettingsResponse")]
    System.IAsyncResult BeginAddUpdateUserOptInSettings(OMGITWebServices.OMGNotifyUserOptInSettings settings, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState);
    
    int EndAddUpdateUserOptInSettings(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/AddUserClinicForNotifications", ReplyAction="http://tempuri.org/IOMGITService/AddUserClinicForNotificationsResponse")]
    System.IAsyncResult BeginAddUserClinicForNotifications(int[] ClinicIDs, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState);
    
    int EndAddUserClinicForNotifications(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/AddExternalUserClinicForNotifications", ReplyAction="http://tempuri.org/IOMGITService/AddExternalUserClinicForNotificationsResponse")]
    System.IAsyncResult BeginAddExternalUserClinicForNotifications(int[] ClinicIDs, string NotifyUserName, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState);
    
    int EndAddExternalUserClinicForNotifications(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/AddUpdateExternalUserOptInSettings", ReplyAction="http://tempuri.org/IOMGITService/AddUpdateExternalUserOptInSettingsResponse")]
    System.IAsyncResult BeginAddUpdateExternalUserOptInSettings(OMGITWebServices.OMGNotifyUserOptInSettings settings, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState);
    
    int EndAddUpdateExternalUserOptInSettings(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/DeleteAllUserClinicForNotifications", ReplyAction="http://tempuri.org/IOMGITService/DeleteAllUserClinicForNotificationsResponse")]
    System.IAsyncResult BeginDeleteAllUserClinicForNotifications(OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState);
    
    void EndDeleteAllUserClinicForNotifications(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/DeleteAllExternalUserClinicForNotifications", ReplyAction="http://tempuri.org/IOMGITService/DeleteAllExternalUserClinicForNotificationsRespo" +
        "nse")]
    System.IAsyncResult BeginDeleteAllExternalUserClinicForNotifications(string NotifyUserName, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState);
    
    void EndDeleteAllExternalUserClinicForNotifications(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/DoesExternalUserExist", ReplyAction="http://tempuri.org/IOMGITService/DoesExternalUserExistResponse")]
    System.IAsyncResult BeginDoesExternalUserExist(string NotifyUserName, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState);
    
    int EndDoesExternalUserExist(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/GetUserClinicsForNotifications", ReplyAction="http://tempuri.org/IOMGITService/GetUserClinicsForNotificationsResponse")]
    System.IAsyncResult BeginGetUserClinicsForNotifications(string NotifyUserName, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState);
    
    int[] EndGetUserClinicsForNotifications(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/GetExternalUserClinicsForNotifications", ReplyAction="http://tempuri.org/IOMGITService/GetExternalUserClinicsForNotificationsResponse")]
    System.IAsyncResult BeginGetExternalUserClinicsForNotifications(string NotifyUserName, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState);
    
    int[] EndGetExternalUserClinicsForNotifications(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/GetListOfValidSendLocations", ReplyAction="http://tempuri.org/IOMGITService/GetListOfValidSendLocationsResponse")]
    System.IAsyncResult BeginGetListOfValidSendLocations(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState);
    
    string[] EndGetListOfValidSendLocations(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/GetNotificationAdmins", ReplyAction="http://tempuri.org/IOMGITService/GetNotificationAdminsResponse")]
    System.IAsyncResult BeginGetNotificationAdmins(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState);
    
    string[] EndGetNotificationAdmins(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/SendOMGNotificationToLocations", ReplyAction="http://tempuri.org/IOMGITService/SendOMGNotificationToLocationsResponse")]
    System.IAsyncResult BeginSendOMGNotificationToLocations(OMGITWebServices.OMGLocationNotificationMessage msg, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState);
    
    int EndSendOMGNotificationToLocations(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/SendTestNotificationToUser", ReplyAction="http://tempuri.org/IOMGITService/SendTestNotificationToUserResponse")]
    System.IAsyncResult BeginSendTestNotificationToUser(OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState);
    
    int EndSendTestNotificationToUser(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/AcknowledgeNotification", ReplyAction="http://tempuri.org/IOMGITService/AcknowledgeNotificationResponse")]
    System.IAsyncResult BeginAcknowledgeNotification(string msgConfirmID, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState);
    
    OMGITWebServices.OMGReturnMessage EndAcknowledgeNotification(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/SendNotification", ReplyAction="http://tempuri.org/IOMGITService/SendNotificationResponse")]
    System.IAsyncResult BeginSendNotification(OMGITWebServices.OMGPushNotificationSendData sendData, OMGITWebServices.OMGLoginData sender, System.AsyncCallback callback, object asyncState);
    
    OMGITWebServices.OMGReturnMessage EndSendNotification(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/Report_GetUserSignUpsWithTableID", ReplyAction="http://tempuri.org/IOMGITService/Report_GetUserSignUpsWithTableIDResponse")]
    System.IAsyncResult BeginReport_GetUserSignUpsWithTableID(OMGITWebServices.OMGLoginData sender, System.AsyncCallback callback, object asyncState);
    
    System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserSignupReportRow> EndReport_GetUserSignUpsWithTableID(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/Report_GetExternalUserSignUpsWithTableID", ReplyAction="http://tempuri.org/IOMGITService/Report_GetExternalUserSignUpsWithTableIDResponse" +
        "")]
    System.IAsyncResult BeginReport_GetExternalUserSignUpsWithTableID(OMGITWebServices.OMGLoginData sender, System.AsyncCallback callback, object asyncState);
    
    System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserSignupReportRow> EndReport_GetExternalUserSignUpsWithTableID(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/Report_GetUserNotificationHistory", ReplyAction="http://tempuri.org/IOMGITService/Report_GetUserNotificationHistoryResponse")]
    System.IAsyncResult BeginReport_GetUserNotificationHistory(string ReportUserName, OMGITWebServices.OMGLoginData sender, System.AsyncCallback callback, object asyncState);
    
    System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserNotificationHistoryRow> EndReport_GetUserNotificationHistory(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOMGITService/RemoveUserFromClinicNotifications", ReplyAction="http://tempuri.org/IOMGITService/RemoveUserFromClinicNotificationsResponse")]
    System.IAsyncResult BeginRemoveUserFromClinicNotifications(string UserToRemove, int TableID, OMGITWebServices.OMGLoginData sender, System.AsyncCallback callback, object asyncState);
    
    int EndRemoveUserFromClinicNotifications(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IOMGITServiceChannel : IOMGITService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public OMGITWebServices.OMGReturnMessage Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((OMGITWebServices.OMGReturnMessage)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class LogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public LogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public OMGITWebServices.OMGReturnMessage Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((OMGITWebServices.OMGReturnMessage)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class RegisterForNotificationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public RegisterForNotificationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public OMGITWebServices.OMGReturnMessage Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((OMGITWebServices.OMGReturnMessage)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class TestSendNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public TestSendNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public OMGITWebServices.OMGReturnMessage Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((OMGITWebServices.OMGReturnMessage)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ValidateAuthenticationTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public ValidateAuthenticationTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public OMGITWebServices.OMGReturnMessage Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((OMGITWebServices.OMGReturnMessage)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetRecentMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetRecentMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public string[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetValidSendLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetValidSendLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public System.Collections.Generic.Dictionary<int, string> Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetValidLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetValidLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public System.Collections.Generic.Dictionary<int, string> Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetCarrierTextMappingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetCarrierTextMappingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGNotifyCarrierTextMapping> Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGNotifyCarrierTextMapping>)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetUserOptInSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetUserOptInSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public OMGITWebServices.OMGNotifyUserOptInSettings Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((OMGITWebServices.OMGNotifyUserOptInSettings)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetExternalUserOptInSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetExternalUserOptInSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public OMGITWebServices.OMGNotifyUserOptInSettings Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((OMGITWebServices.OMGNotifyUserOptInSettings)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class AddUpdateUserOptInSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public AddUpdateUserOptInSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class AddUserClinicForNotificationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public AddUserClinicForNotificationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class AddExternalUserClinicForNotificationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public AddExternalUserClinicForNotificationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class AddUpdateExternalUserOptInSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public AddUpdateExternalUserOptInSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class DoesExternalUserExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public DoesExternalUserExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetUserClinicsForNotificationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetUserClinicsForNotificationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetExternalUserClinicsForNotificationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetExternalUserClinicsForNotificationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetListOfValidSendLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetListOfValidSendLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public string[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetNotificationAdminsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetNotificationAdminsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public string[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class SendOMGNotificationToLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public SendOMGNotificationToLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class SendTestNotificationToUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public SendTestNotificationToUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class AcknowledgeNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public AcknowledgeNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public OMGITWebServices.OMGReturnMessage Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((OMGITWebServices.OMGReturnMessage)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class SendNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public SendNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public OMGITWebServices.OMGReturnMessage Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((OMGITWebServices.OMGReturnMessage)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class Report_GetUserSignUpsWithTableIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public Report_GetUserSignUpsWithTableIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserSignupReportRow> Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserSignupReportRow>)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class Report_GetExternalUserSignUpsWithTableIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public Report_GetExternalUserSignUpsWithTableIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserSignupReportRow> Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserSignupReportRow>)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class Report_GetUserNotificationHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public Report_GetUserNotificationHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserNotificationHistoryRow> Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserNotificationHistoryRow>)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class RemoveUserFromClinicNotificationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public RemoveUserFromClinicNotificationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class OMGITServiceClient : System.ServiceModel.ClientBase<IOMGITService>, IOMGITService
{
    
    private BeginOperationDelegate onBeginLoginDelegate;
    
    private EndOperationDelegate onEndLoginDelegate;
    
    private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
    
    private BeginOperationDelegate onBeginLogoutDelegate;
    
    private EndOperationDelegate onEndLogoutDelegate;
    
    private System.Threading.SendOrPostCallback onLogoutCompletedDelegate;
    
    private BeginOperationDelegate onBeginRegisterForNotificationsDelegate;
    
    private EndOperationDelegate onEndRegisterForNotificationsDelegate;
    
    private System.Threading.SendOrPostCallback onRegisterForNotificationsCompletedDelegate;
    
    private BeginOperationDelegate onBeginTestSendNotificationDelegate;
    
    private EndOperationDelegate onEndTestSendNotificationDelegate;
    
    private System.Threading.SendOrPostCallback onTestSendNotificationCompletedDelegate;
    
    private BeginOperationDelegate onBeginValidateAuthenticationTokenDelegate;
    
    private EndOperationDelegate onEndValidateAuthenticationTokenDelegate;
    
    private System.Threading.SendOrPostCallback onValidateAuthenticationTokenCompletedDelegate;
    
    private BeginOperationDelegate onBeginAddLogMessageTickerAppDelegate;
    
    private EndOperationDelegate onEndAddLogMessageTickerAppDelegate;
    
    private System.Threading.SendOrPostCallback onAddLogMessageTickerAppCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetRecentMessagesDelegate;
    
    private EndOperationDelegate onEndGetRecentMessagesDelegate;
    
    private System.Threading.SendOrPostCallback onGetRecentMessagesCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetValidSendLocationsDelegate;
    
    private EndOperationDelegate onEndGetValidSendLocationsDelegate;
    
    private System.Threading.SendOrPostCallback onGetValidSendLocationsCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetValidLocationsDelegate;
    
    private EndOperationDelegate onEndGetValidLocationsDelegate;
    
    private System.Threading.SendOrPostCallback onGetValidLocationsCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetCarrierTextMappingsDelegate;
    
    private EndOperationDelegate onEndGetCarrierTextMappingsDelegate;
    
    private System.Threading.SendOrPostCallback onGetCarrierTextMappingsCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetUserOptInSettingsDelegate;
    
    private EndOperationDelegate onEndGetUserOptInSettingsDelegate;
    
    private System.Threading.SendOrPostCallback onGetUserOptInSettingsCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetExternalUserOptInSettingsDelegate;
    
    private EndOperationDelegate onEndGetExternalUserOptInSettingsDelegate;
    
    private System.Threading.SendOrPostCallback onGetExternalUserOptInSettingsCompletedDelegate;
    
    private BeginOperationDelegate onBeginAddUpdateUserOptInSettingsDelegate;
    
    private EndOperationDelegate onEndAddUpdateUserOptInSettingsDelegate;
    
    private System.Threading.SendOrPostCallback onAddUpdateUserOptInSettingsCompletedDelegate;
    
    private BeginOperationDelegate onBeginAddUserClinicForNotificationsDelegate;
    
    private EndOperationDelegate onEndAddUserClinicForNotificationsDelegate;
    
    private System.Threading.SendOrPostCallback onAddUserClinicForNotificationsCompletedDelegate;
    
    private BeginOperationDelegate onBeginAddExternalUserClinicForNotificationsDelegate;
    
    private EndOperationDelegate onEndAddExternalUserClinicForNotificationsDelegate;
    
    private System.Threading.SendOrPostCallback onAddExternalUserClinicForNotificationsCompletedDelegate;
    
    private BeginOperationDelegate onBeginAddUpdateExternalUserOptInSettingsDelegate;
    
    private EndOperationDelegate onEndAddUpdateExternalUserOptInSettingsDelegate;
    
    private System.Threading.SendOrPostCallback onAddUpdateExternalUserOptInSettingsCompletedDelegate;
    
    private BeginOperationDelegate onBeginDeleteAllUserClinicForNotificationsDelegate;
    
    private EndOperationDelegate onEndDeleteAllUserClinicForNotificationsDelegate;
    
    private System.Threading.SendOrPostCallback onDeleteAllUserClinicForNotificationsCompletedDelegate;
    
    private BeginOperationDelegate onBeginDeleteAllExternalUserClinicForNotificationsDelegate;
    
    private EndOperationDelegate onEndDeleteAllExternalUserClinicForNotificationsDelegate;
    
    private System.Threading.SendOrPostCallback onDeleteAllExternalUserClinicForNotificationsCompletedDelegate;
    
    private BeginOperationDelegate onBeginDoesExternalUserExistDelegate;
    
    private EndOperationDelegate onEndDoesExternalUserExistDelegate;
    
    private System.Threading.SendOrPostCallback onDoesExternalUserExistCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetUserClinicsForNotificationsDelegate;
    
    private EndOperationDelegate onEndGetUserClinicsForNotificationsDelegate;
    
    private System.Threading.SendOrPostCallback onGetUserClinicsForNotificationsCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetExternalUserClinicsForNotificationsDelegate;
    
    private EndOperationDelegate onEndGetExternalUserClinicsForNotificationsDelegate;
    
    private System.Threading.SendOrPostCallback onGetExternalUserClinicsForNotificationsCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetListOfValidSendLocationsDelegate;
    
    private EndOperationDelegate onEndGetListOfValidSendLocationsDelegate;
    
    private System.Threading.SendOrPostCallback onGetListOfValidSendLocationsCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetNotificationAdminsDelegate;
    
    private EndOperationDelegate onEndGetNotificationAdminsDelegate;
    
    private System.Threading.SendOrPostCallback onGetNotificationAdminsCompletedDelegate;
    
    private BeginOperationDelegate onBeginSendOMGNotificationToLocationsDelegate;
    
    private EndOperationDelegate onEndSendOMGNotificationToLocationsDelegate;
    
    private System.Threading.SendOrPostCallback onSendOMGNotificationToLocationsCompletedDelegate;
    
    private BeginOperationDelegate onBeginSendTestNotificationToUserDelegate;
    
    private EndOperationDelegate onEndSendTestNotificationToUserDelegate;
    
    private System.Threading.SendOrPostCallback onSendTestNotificationToUserCompletedDelegate;
    
    private BeginOperationDelegate onBeginAcknowledgeNotificationDelegate;
    
    private EndOperationDelegate onEndAcknowledgeNotificationDelegate;
    
    private System.Threading.SendOrPostCallback onAcknowledgeNotificationCompletedDelegate;
    
    private BeginOperationDelegate onBeginSendNotificationDelegate;
    
    private EndOperationDelegate onEndSendNotificationDelegate;
    
    private System.Threading.SendOrPostCallback onSendNotificationCompletedDelegate;
    
    private BeginOperationDelegate onBeginReport_GetUserSignUpsWithTableIDDelegate;
    
    private EndOperationDelegate onEndReport_GetUserSignUpsWithTableIDDelegate;
    
    private System.Threading.SendOrPostCallback onReport_GetUserSignUpsWithTableIDCompletedDelegate;
    
    private BeginOperationDelegate onBeginReport_GetExternalUserSignUpsWithTableIDDelegate;
    
    private EndOperationDelegate onEndReport_GetExternalUserSignUpsWithTableIDDelegate;
    
    private System.Threading.SendOrPostCallback onReport_GetExternalUserSignUpsWithTableIDCompletedDelegate;
    
    private BeginOperationDelegate onBeginReport_GetUserNotificationHistoryDelegate;
    
    private EndOperationDelegate onEndReport_GetUserNotificationHistoryDelegate;
    
    private System.Threading.SendOrPostCallback onReport_GetUserNotificationHistoryCompletedDelegate;
    
    private BeginOperationDelegate onBeginRemoveUserFromClinicNotificationsDelegate;
    
    private EndOperationDelegate onEndRemoveUserFromClinicNotificationsDelegate;
    
    private System.Threading.SendOrPostCallback onRemoveUserFromClinicNotificationsCompletedDelegate;
    
    private BeginOperationDelegate onBeginOpenDelegate;
    
    private EndOperationDelegate onEndOpenDelegate;
    
    private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
    
    private BeginOperationDelegate onBeginCloseDelegate;
    
    private EndOperationDelegate onEndCloseDelegate;
    
    private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
    
    public OMGITServiceClient()
    {
    }
    
    public OMGITServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public OMGITServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public OMGITServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public OMGITServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Net.CookieContainer CookieContainer
    {
        get
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                return httpCookieContainerManager.CookieContainer;
            }
            else
            {
                return null;
            }
        }
        set
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                httpCookieContainerManager.CookieContainer = value;
            }
            else
            {
                throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                        "ookieContainerBindingElement.");
            }
        }
    }
    
    public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
    
    public event System.EventHandler<LogoutCompletedEventArgs> LogoutCompleted;
    
    public event System.EventHandler<RegisterForNotificationsCompletedEventArgs> RegisterForNotificationsCompleted;
    
    public event System.EventHandler<TestSendNotificationCompletedEventArgs> TestSendNotificationCompleted;
    
    public event System.EventHandler<ValidateAuthenticationTokenCompletedEventArgs> ValidateAuthenticationTokenCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddLogMessageTickerAppCompleted;
    
    public event System.EventHandler<GetRecentMessagesCompletedEventArgs> GetRecentMessagesCompleted;
    
    public event System.EventHandler<GetValidSendLocationsCompletedEventArgs> GetValidSendLocationsCompleted;
    
    public event System.EventHandler<GetValidLocationsCompletedEventArgs> GetValidLocationsCompleted;
    
    public event System.EventHandler<GetCarrierTextMappingsCompletedEventArgs> GetCarrierTextMappingsCompleted;
    
    public event System.EventHandler<GetUserOptInSettingsCompletedEventArgs> GetUserOptInSettingsCompleted;
    
    public event System.EventHandler<GetExternalUserOptInSettingsCompletedEventArgs> GetExternalUserOptInSettingsCompleted;
    
    public event System.EventHandler<AddUpdateUserOptInSettingsCompletedEventArgs> AddUpdateUserOptInSettingsCompleted;
    
    public event System.EventHandler<AddUserClinicForNotificationsCompletedEventArgs> AddUserClinicForNotificationsCompleted;
    
    public event System.EventHandler<AddExternalUserClinicForNotificationsCompletedEventArgs> AddExternalUserClinicForNotificationsCompleted;
    
    public event System.EventHandler<AddUpdateExternalUserOptInSettingsCompletedEventArgs> AddUpdateExternalUserOptInSettingsCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteAllUserClinicForNotificationsCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteAllExternalUserClinicForNotificationsCompleted;
    
    public event System.EventHandler<DoesExternalUserExistCompletedEventArgs> DoesExternalUserExistCompleted;
    
    public event System.EventHandler<GetUserClinicsForNotificationsCompletedEventArgs> GetUserClinicsForNotificationsCompleted;
    
    public event System.EventHandler<GetExternalUserClinicsForNotificationsCompletedEventArgs> GetExternalUserClinicsForNotificationsCompleted;
    
    public event System.EventHandler<GetListOfValidSendLocationsCompletedEventArgs> GetListOfValidSendLocationsCompleted;
    
    public event System.EventHandler<GetNotificationAdminsCompletedEventArgs> GetNotificationAdminsCompleted;
    
    public event System.EventHandler<SendOMGNotificationToLocationsCompletedEventArgs> SendOMGNotificationToLocationsCompleted;
    
    public event System.EventHandler<SendTestNotificationToUserCompletedEventArgs> SendTestNotificationToUserCompleted;
    
    public event System.EventHandler<AcknowledgeNotificationCompletedEventArgs> AcknowledgeNotificationCompleted;
    
    public event System.EventHandler<SendNotificationCompletedEventArgs> SendNotificationCompleted;
    
    public event System.EventHandler<Report_GetUserSignUpsWithTableIDCompletedEventArgs> Report_GetUserSignUpsWithTableIDCompleted;
    
    public event System.EventHandler<Report_GetExternalUserSignUpsWithTableIDCompletedEventArgs> Report_GetExternalUserSignUpsWithTableIDCompleted;
    
    public event System.EventHandler<Report_GetUserNotificationHistoryCompletedEventArgs> Report_GetUserNotificationHistoryCompleted;
    
    public event System.EventHandler<RemoveUserFromClinicNotificationsCompletedEventArgs> RemoveUserFromClinicNotificationsCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginLogin(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginLogin(name, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    OMGITWebServices.OMGReturnMessage IOMGITService.EndLogin(System.IAsyncResult result)
    {
        return base.Channel.EndLogin(result);
    }
    
    private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGLoginData name = ((OMGITWebServices.OMGLoginData)(inValues[0]));
        return ((IOMGITService)(this)).BeginLogin(name, callback, asyncState);
    }
    
    private object[] OnEndLogin(System.IAsyncResult result)
    {
        OMGITWebServices.OMGReturnMessage retVal = ((IOMGITService)(this)).EndLogin(result);
        return new object[] {
                retVal};
    }
    
    private void OnLoginCompleted(object state)
    {
        if ((this.LoginCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void LoginAsync(OMGITWebServices.OMGLoginData name)
    {
        this.LoginAsync(name, null);
    }
    
    public void LoginAsync(OMGITWebServices.OMGLoginData name, object userState)
    {
        if ((this.onBeginLoginDelegate == null))
        {
            this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
        }
        if ((this.onEndLoginDelegate == null))
        {
            this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
        }
        if ((this.onLoginCompletedDelegate == null))
        {
            this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
        }
        base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                    name}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginLogout(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginLogout(name, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    OMGITWebServices.OMGReturnMessage IOMGITService.EndLogout(System.IAsyncResult result)
    {
        return base.Channel.EndLogout(result);
    }
    
    private System.IAsyncResult OnBeginLogout(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGLoginData name = ((OMGITWebServices.OMGLoginData)(inValues[0]));
        return ((IOMGITService)(this)).BeginLogout(name, callback, asyncState);
    }
    
    private object[] OnEndLogout(System.IAsyncResult result)
    {
        OMGITWebServices.OMGReturnMessage retVal = ((IOMGITService)(this)).EndLogout(result);
        return new object[] {
                retVal};
    }
    
    private void OnLogoutCompleted(object state)
    {
        if ((this.LogoutCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.LogoutCompleted(this, new LogoutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void LogoutAsync(OMGITWebServices.OMGLoginData name)
    {
        this.LogoutAsync(name, null);
    }
    
    public void LogoutAsync(OMGITWebServices.OMGLoginData name, object userState)
    {
        if ((this.onBeginLogoutDelegate == null))
        {
            this.onBeginLogoutDelegate = new BeginOperationDelegate(this.OnBeginLogout);
        }
        if ((this.onEndLogoutDelegate == null))
        {
            this.onEndLogoutDelegate = new EndOperationDelegate(this.OnEndLogout);
        }
        if ((this.onLogoutCompletedDelegate == null))
        {
            this.onLogoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogoutCompleted);
        }
        base.InvokeAsync(this.onBeginLogoutDelegate, new object[] {
                    name}, this.onEndLogoutDelegate, this.onLogoutCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginRegisterForNotifications(OMGITWebServices.OMGInstallationData name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginRegisterForNotifications(name, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    OMGITWebServices.OMGReturnMessage IOMGITService.EndRegisterForNotifications(System.IAsyncResult result)
    {
        return base.Channel.EndRegisterForNotifications(result);
    }
    
    private System.IAsyncResult OnBeginRegisterForNotifications(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGInstallationData name = ((OMGITWebServices.OMGInstallationData)(inValues[0]));
        return ((IOMGITService)(this)).BeginRegisterForNotifications(name, callback, asyncState);
    }
    
    private object[] OnEndRegisterForNotifications(System.IAsyncResult result)
    {
        OMGITWebServices.OMGReturnMessage retVal = ((IOMGITService)(this)).EndRegisterForNotifications(result);
        return new object[] {
                retVal};
    }
    
    private void OnRegisterForNotificationsCompleted(object state)
    {
        if ((this.RegisterForNotificationsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.RegisterForNotificationsCompleted(this, new RegisterForNotificationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void RegisterForNotificationsAsync(OMGITWebServices.OMGInstallationData name)
    {
        this.RegisterForNotificationsAsync(name, null);
    }
    
    public void RegisterForNotificationsAsync(OMGITWebServices.OMGInstallationData name, object userState)
    {
        if ((this.onBeginRegisterForNotificationsDelegate == null))
        {
            this.onBeginRegisterForNotificationsDelegate = new BeginOperationDelegate(this.OnBeginRegisterForNotifications);
        }
        if ((this.onEndRegisterForNotificationsDelegate == null))
        {
            this.onEndRegisterForNotificationsDelegate = new EndOperationDelegate(this.OnEndRegisterForNotifications);
        }
        if ((this.onRegisterForNotificationsCompletedDelegate == null))
        {
            this.onRegisterForNotificationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterForNotificationsCompleted);
        }
        base.InvokeAsync(this.onBeginRegisterForNotificationsDelegate, new object[] {
                    name}, this.onEndRegisterForNotificationsDelegate, this.onRegisterForNotificationsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginTestSendNotification(OMGITWebServices.OMGAdminTestSendData name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginTestSendNotification(name, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    OMGITWebServices.OMGReturnMessage IOMGITService.EndTestSendNotification(System.IAsyncResult result)
    {
        return base.Channel.EndTestSendNotification(result);
    }
    
    private System.IAsyncResult OnBeginTestSendNotification(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGAdminTestSendData name = ((OMGITWebServices.OMGAdminTestSendData)(inValues[0]));
        return ((IOMGITService)(this)).BeginTestSendNotification(name, callback, asyncState);
    }
    
    private object[] OnEndTestSendNotification(System.IAsyncResult result)
    {
        OMGITWebServices.OMGReturnMessage retVal = ((IOMGITService)(this)).EndTestSendNotification(result);
        return new object[] {
                retVal};
    }
    
    private void OnTestSendNotificationCompleted(object state)
    {
        if ((this.TestSendNotificationCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.TestSendNotificationCompleted(this, new TestSendNotificationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void TestSendNotificationAsync(OMGITWebServices.OMGAdminTestSendData name)
    {
        this.TestSendNotificationAsync(name, null);
    }
    
    public void TestSendNotificationAsync(OMGITWebServices.OMGAdminTestSendData name, object userState)
    {
        if ((this.onBeginTestSendNotificationDelegate == null))
        {
            this.onBeginTestSendNotificationDelegate = new BeginOperationDelegate(this.OnBeginTestSendNotification);
        }
        if ((this.onEndTestSendNotificationDelegate == null))
        {
            this.onEndTestSendNotificationDelegate = new EndOperationDelegate(this.OnEndTestSendNotification);
        }
        if ((this.onTestSendNotificationCompletedDelegate == null))
        {
            this.onTestSendNotificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSendNotificationCompleted);
        }
        base.InvokeAsync(this.onBeginTestSendNotificationDelegate, new object[] {
                    name}, this.onEndTestSendNotificationDelegate, this.onTestSendNotificationCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginValidateAuthenticationToken(OMGITWebServices.OMGAuthTokenData name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginValidateAuthenticationToken(name, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    OMGITWebServices.OMGReturnMessage IOMGITService.EndValidateAuthenticationToken(System.IAsyncResult result)
    {
        return base.Channel.EndValidateAuthenticationToken(result);
    }
    
    private System.IAsyncResult OnBeginValidateAuthenticationToken(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGAuthTokenData name = ((OMGITWebServices.OMGAuthTokenData)(inValues[0]));
        return ((IOMGITService)(this)).BeginValidateAuthenticationToken(name, callback, asyncState);
    }
    
    private object[] OnEndValidateAuthenticationToken(System.IAsyncResult result)
    {
        OMGITWebServices.OMGReturnMessage retVal = ((IOMGITService)(this)).EndValidateAuthenticationToken(result);
        return new object[] {
                retVal};
    }
    
    private void OnValidateAuthenticationTokenCompleted(object state)
    {
        if ((this.ValidateAuthenticationTokenCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.ValidateAuthenticationTokenCompleted(this, new ValidateAuthenticationTokenCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void ValidateAuthenticationTokenAsync(OMGITWebServices.OMGAuthTokenData name)
    {
        this.ValidateAuthenticationTokenAsync(name, null);
    }
    
    public void ValidateAuthenticationTokenAsync(OMGITWebServices.OMGAuthTokenData name, object userState)
    {
        if ((this.onBeginValidateAuthenticationTokenDelegate == null))
        {
            this.onBeginValidateAuthenticationTokenDelegate = new BeginOperationDelegate(this.OnBeginValidateAuthenticationToken);
        }
        if ((this.onEndValidateAuthenticationTokenDelegate == null))
        {
            this.onEndValidateAuthenticationTokenDelegate = new EndOperationDelegate(this.OnEndValidateAuthenticationToken);
        }
        if ((this.onValidateAuthenticationTokenCompletedDelegate == null))
        {
            this.onValidateAuthenticationTokenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateAuthenticationTokenCompleted);
        }
        base.InvokeAsync(this.onBeginValidateAuthenticationTokenDelegate, new object[] {
                    name}, this.onEndValidateAuthenticationTokenDelegate, this.onValidateAuthenticationTokenCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginAddLogMessageTickerApp(string logmessage, string msgdetail, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginAddLogMessageTickerApp(logmessage, msgdetail, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void IOMGITService.EndAddLogMessageTickerApp(System.IAsyncResult result)
    {
        base.Channel.EndAddLogMessageTickerApp(result);
    }
    
    private System.IAsyncResult OnBeginAddLogMessageTickerApp(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string logmessage = ((string)(inValues[0]));
        string msgdetail = ((string)(inValues[1]));
        return ((IOMGITService)(this)).BeginAddLogMessageTickerApp(logmessage, msgdetail, callback, asyncState);
    }
    
    private object[] OnEndAddLogMessageTickerApp(System.IAsyncResult result)
    {
        ((IOMGITService)(this)).EndAddLogMessageTickerApp(result);
        return null;
    }
    
    private void OnAddLogMessageTickerAppCompleted(object state)
    {
        if ((this.AddLogMessageTickerAppCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.AddLogMessageTickerAppCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void AddLogMessageTickerAppAsync(string logmessage, string msgdetail)
    {
        this.AddLogMessageTickerAppAsync(logmessage, msgdetail, null);
    }
    
    public void AddLogMessageTickerAppAsync(string logmessage, string msgdetail, object userState)
    {
        if ((this.onBeginAddLogMessageTickerAppDelegate == null))
        {
            this.onBeginAddLogMessageTickerAppDelegate = new BeginOperationDelegate(this.OnBeginAddLogMessageTickerApp);
        }
        if ((this.onEndAddLogMessageTickerAppDelegate == null))
        {
            this.onEndAddLogMessageTickerAppDelegate = new EndOperationDelegate(this.OnEndAddLogMessageTickerApp);
        }
        if ((this.onAddLogMessageTickerAppCompletedDelegate == null))
        {
            this.onAddLogMessageTickerAppCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddLogMessageTickerAppCompleted);
        }
        base.InvokeAsync(this.onBeginAddLogMessageTickerAppDelegate, new object[] {
                    logmessage,
                    msgdetail}, this.onEndAddLogMessageTickerAppDelegate, this.onAddLogMessageTickerAppCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginGetRecentMessages(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetRecentMessages(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    string[] IOMGITService.EndGetRecentMessages(System.IAsyncResult result)
    {
        return base.Channel.EndGetRecentMessages(result);
    }
    
    private System.IAsyncResult OnBeginGetRecentMessages(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((IOMGITService)(this)).BeginGetRecentMessages(callback, asyncState);
    }
    
    private object[] OnEndGetRecentMessages(System.IAsyncResult result)
    {
        string[] retVal = ((IOMGITService)(this)).EndGetRecentMessages(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetRecentMessagesCompleted(object state)
    {
        if ((this.GetRecentMessagesCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetRecentMessagesCompleted(this, new GetRecentMessagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetRecentMessagesAsync()
    {
        this.GetRecentMessagesAsync(null);
    }
    
    public void GetRecentMessagesAsync(object userState)
    {
        if ((this.onBeginGetRecentMessagesDelegate == null))
        {
            this.onBeginGetRecentMessagesDelegate = new BeginOperationDelegate(this.OnBeginGetRecentMessages);
        }
        if ((this.onEndGetRecentMessagesDelegate == null))
        {
            this.onEndGetRecentMessagesDelegate = new EndOperationDelegate(this.OnEndGetRecentMessages);
        }
        if ((this.onGetRecentMessagesCompletedDelegate == null))
        {
            this.onGetRecentMessagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRecentMessagesCompleted);
        }
        base.InvokeAsync(this.onBeginGetRecentMessagesDelegate, null, this.onEndGetRecentMessagesDelegate, this.onGetRecentMessagesCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginGetValidSendLocations(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetValidSendLocations(name, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Collections.Generic.Dictionary<int, string> IOMGITService.EndGetValidSendLocations(System.IAsyncResult result)
    {
        return base.Channel.EndGetValidSendLocations(result);
    }
    
    private System.IAsyncResult OnBeginGetValidSendLocations(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGLoginData name = ((OMGITWebServices.OMGLoginData)(inValues[0]));
        return ((IOMGITService)(this)).BeginGetValidSendLocations(name, callback, asyncState);
    }
    
    private object[] OnEndGetValidSendLocations(System.IAsyncResult result)
    {
        System.Collections.Generic.Dictionary<int, string> retVal = ((IOMGITService)(this)).EndGetValidSendLocations(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetValidSendLocationsCompleted(object state)
    {
        if ((this.GetValidSendLocationsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetValidSendLocationsCompleted(this, new GetValidSendLocationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetValidSendLocationsAsync(OMGITWebServices.OMGLoginData name)
    {
        this.GetValidSendLocationsAsync(name, null);
    }
    
    public void GetValidSendLocationsAsync(OMGITWebServices.OMGLoginData name, object userState)
    {
        if ((this.onBeginGetValidSendLocationsDelegate == null))
        {
            this.onBeginGetValidSendLocationsDelegate = new BeginOperationDelegate(this.OnBeginGetValidSendLocations);
        }
        if ((this.onEndGetValidSendLocationsDelegate == null))
        {
            this.onEndGetValidSendLocationsDelegate = new EndOperationDelegate(this.OnEndGetValidSendLocations);
        }
        if ((this.onGetValidSendLocationsCompletedDelegate == null))
        {
            this.onGetValidSendLocationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetValidSendLocationsCompleted);
        }
        base.InvokeAsync(this.onBeginGetValidSendLocationsDelegate, new object[] {
                    name}, this.onEndGetValidSendLocationsDelegate, this.onGetValidSendLocationsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginGetValidLocations(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetValidLocations(name, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Collections.Generic.Dictionary<int, string> IOMGITService.EndGetValidLocations(System.IAsyncResult result)
    {
        return base.Channel.EndGetValidLocations(result);
    }
    
    private System.IAsyncResult OnBeginGetValidLocations(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGLoginData name = ((OMGITWebServices.OMGLoginData)(inValues[0]));
        return ((IOMGITService)(this)).BeginGetValidLocations(name, callback, asyncState);
    }
    
    private object[] OnEndGetValidLocations(System.IAsyncResult result)
    {
        System.Collections.Generic.Dictionary<int, string> retVal = ((IOMGITService)(this)).EndGetValidLocations(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetValidLocationsCompleted(object state)
    {
        if ((this.GetValidLocationsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetValidLocationsCompleted(this, new GetValidLocationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetValidLocationsAsync(OMGITWebServices.OMGLoginData name)
    {
        this.GetValidLocationsAsync(name, null);
    }
    
    public void GetValidLocationsAsync(OMGITWebServices.OMGLoginData name, object userState)
    {
        if ((this.onBeginGetValidLocationsDelegate == null))
        {
            this.onBeginGetValidLocationsDelegate = new BeginOperationDelegate(this.OnBeginGetValidLocations);
        }
        if ((this.onEndGetValidLocationsDelegate == null))
        {
            this.onEndGetValidLocationsDelegate = new EndOperationDelegate(this.OnEndGetValidLocations);
        }
        if ((this.onGetValidLocationsCompletedDelegate == null))
        {
            this.onGetValidLocationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetValidLocationsCompleted);
        }
        base.InvokeAsync(this.onBeginGetValidLocationsDelegate, new object[] {
                    name}, this.onEndGetValidLocationsDelegate, this.onGetValidLocationsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginGetCarrierTextMappings(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetCarrierTextMappings(name, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGNotifyCarrierTextMapping> IOMGITService.EndGetCarrierTextMappings(System.IAsyncResult result)
    {
        return base.Channel.EndGetCarrierTextMappings(result);
    }
    
    private System.IAsyncResult OnBeginGetCarrierTextMappings(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGLoginData name = ((OMGITWebServices.OMGLoginData)(inValues[0]));
        return ((IOMGITService)(this)).BeginGetCarrierTextMappings(name, callback, asyncState);
    }
    
    private object[] OnEndGetCarrierTextMappings(System.IAsyncResult result)
    {
        System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGNotifyCarrierTextMapping> retVal = ((IOMGITService)(this)).EndGetCarrierTextMappings(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetCarrierTextMappingsCompleted(object state)
    {
        if ((this.GetCarrierTextMappingsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetCarrierTextMappingsCompleted(this, new GetCarrierTextMappingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetCarrierTextMappingsAsync(OMGITWebServices.OMGLoginData name)
    {
        this.GetCarrierTextMappingsAsync(name, null);
    }
    
    public void GetCarrierTextMappingsAsync(OMGITWebServices.OMGLoginData name, object userState)
    {
        if ((this.onBeginGetCarrierTextMappingsDelegate == null))
        {
            this.onBeginGetCarrierTextMappingsDelegate = new BeginOperationDelegate(this.OnBeginGetCarrierTextMappings);
        }
        if ((this.onEndGetCarrierTextMappingsDelegate == null))
        {
            this.onEndGetCarrierTextMappingsDelegate = new EndOperationDelegate(this.OnEndGetCarrierTextMappings);
        }
        if ((this.onGetCarrierTextMappingsCompletedDelegate == null))
        {
            this.onGetCarrierTextMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCarrierTextMappingsCompleted);
        }
        base.InvokeAsync(this.onBeginGetCarrierTextMappingsDelegate, new object[] {
                    name}, this.onEndGetCarrierTextMappingsDelegate, this.onGetCarrierTextMappingsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginGetUserOptInSettings(string NotifyUserName, OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetUserOptInSettings(NotifyUserName, name, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    OMGITWebServices.OMGNotifyUserOptInSettings IOMGITService.EndGetUserOptInSettings(System.IAsyncResult result)
    {
        return base.Channel.EndGetUserOptInSettings(result);
    }
    
    private System.IAsyncResult OnBeginGetUserOptInSettings(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string NotifyUserName = ((string)(inValues[0]));
        OMGITWebServices.OMGLoginData name = ((OMGITWebServices.OMGLoginData)(inValues[1]));
        return ((IOMGITService)(this)).BeginGetUserOptInSettings(NotifyUserName, name, callback, asyncState);
    }
    
    private object[] OnEndGetUserOptInSettings(System.IAsyncResult result)
    {
        OMGITWebServices.OMGNotifyUserOptInSettings retVal = ((IOMGITService)(this)).EndGetUserOptInSettings(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetUserOptInSettingsCompleted(object state)
    {
        if ((this.GetUserOptInSettingsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetUserOptInSettingsCompleted(this, new GetUserOptInSettingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetUserOptInSettingsAsync(string NotifyUserName, OMGITWebServices.OMGLoginData name)
    {
        this.GetUserOptInSettingsAsync(NotifyUserName, name, null);
    }
    
    public void GetUserOptInSettingsAsync(string NotifyUserName, OMGITWebServices.OMGLoginData name, object userState)
    {
        if ((this.onBeginGetUserOptInSettingsDelegate == null))
        {
            this.onBeginGetUserOptInSettingsDelegate = new BeginOperationDelegate(this.OnBeginGetUserOptInSettings);
        }
        if ((this.onEndGetUserOptInSettingsDelegate == null))
        {
            this.onEndGetUserOptInSettingsDelegate = new EndOperationDelegate(this.OnEndGetUserOptInSettings);
        }
        if ((this.onGetUserOptInSettingsCompletedDelegate == null))
        {
            this.onGetUserOptInSettingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserOptInSettingsCompleted);
        }
        base.InvokeAsync(this.onBeginGetUserOptInSettingsDelegate, new object[] {
                    NotifyUserName,
                    name}, this.onEndGetUserOptInSettingsDelegate, this.onGetUserOptInSettingsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginGetExternalUserOptInSettings(string NotifyUserName, OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetExternalUserOptInSettings(NotifyUserName, name, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    OMGITWebServices.OMGNotifyUserOptInSettings IOMGITService.EndGetExternalUserOptInSettings(System.IAsyncResult result)
    {
        return base.Channel.EndGetExternalUserOptInSettings(result);
    }
    
    private System.IAsyncResult OnBeginGetExternalUserOptInSettings(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string NotifyUserName = ((string)(inValues[0]));
        OMGITWebServices.OMGLoginData name = ((OMGITWebServices.OMGLoginData)(inValues[1]));
        return ((IOMGITService)(this)).BeginGetExternalUserOptInSettings(NotifyUserName, name, callback, asyncState);
    }
    
    private object[] OnEndGetExternalUserOptInSettings(System.IAsyncResult result)
    {
        OMGITWebServices.OMGNotifyUserOptInSettings retVal = ((IOMGITService)(this)).EndGetExternalUserOptInSettings(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetExternalUserOptInSettingsCompleted(object state)
    {
        if ((this.GetExternalUserOptInSettingsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetExternalUserOptInSettingsCompleted(this, new GetExternalUserOptInSettingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetExternalUserOptInSettingsAsync(string NotifyUserName, OMGITWebServices.OMGLoginData name)
    {
        this.GetExternalUserOptInSettingsAsync(NotifyUserName, name, null);
    }
    
    public void GetExternalUserOptInSettingsAsync(string NotifyUserName, OMGITWebServices.OMGLoginData name, object userState)
    {
        if ((this.onBeginGetExternalUserOptInSettingsDelegate == null))
        {
            this.onBeginGetExternalUserOptInSettingsDelegate = new BeginOperationDelegate(this.OnBeginGetExternalUserOptInSettings);
        }
        if ((this.onEndGetExternalUserOptInSettingsDelegate == null))
        {
            this.onEndGetExternalUserOptInSettingsDelegate = new EndOperationDelegate(this.OnEndGetExternalUserOptInSettings);
        }
        if ((this.onGetExternalUserOptInSettingsCompletedDelegate == null))
        {
            this.onGetExternalUserOptInSettingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetExternalUserOptInSettingsCompleted);
        }
        base.InvokeAsync(this.onBeginGetExternalUserOptInSettingsDelegate, new object[] {
                    NotifyUserName,
                    name}, this.onEndGetExternalUserOptInSettingsDelegate, this.onGetExternalUserOptInSettingsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginAddUpdateUserOptInSettings(OMGITWebServices.OMGNotifyUserOptInSettings settings, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginAddUpdateUserOptInSettings(settings, loginData, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    int IOMGITService.EndAddUpdateUserOptInSettings(System.IAsyncResult result)
    {
        return base.Channel.EndAddUpdateUserOptInSettings(result);
    }
    
    private System.IAsyncResult OnBeginAddUpdateUserOptInSettings(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGNotifyUserOptInSettings settings = ((OMGITWebServices.OMGNotifyUserOptInSettings)(inValues[0]));
        OMGITWebServices.OMGLoginData loginData = ((OMGITWebServices.OMGLoginData)(inValues[1]));
        return ((IOMGITService)(this)).BeginAddUpdateUserOptInSettings(settings, loginData, callback, asyncState);
    }
    
    private object[] OnEndAddUpdateUserOptInSettings(System.IAsyncResult result)
    {
        int retVal = ((IOMGITService)(this)).EndAddUpdateUserOptInSettings(result);
        return new object[] {
                retVal};
    }
    
    private void OnAddUpdateUserOptInSettingsCompleted(object state)
    {
        if ((this.AddUpdateUserOptInSettingsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.AddUpdateUserOptInSettingsCompleted(this, new AddUpdateUserOptInSettingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void AddUpdateUserOptInSettingsAsync(OMGITWebServices.OMGNotifyUserOptInSettings settings, OMGITWebServices.OMGLoginData loginData)
    {
        this.AddUpdateUserOptInSettingsAsync(settings, loginData, null);
    }
    
    public void AddUpdateUserOptInSettingsAsync(OMGITWebServices.OMGNotifyUserOptInSettings settings, OMGITWebServices.OMGLoginData loginData, object userState)
    {
        if ((this.onBeginAddUpdateUserOptInSettingsDelegate == null))
        {
            this.onBeginAddUpdateUserOptInSettingsDelegate = new BeginOperationDelegate(this.OnBeginAddUpdateUserOptInSettings);
        }
        if ((this.onEndAddUpdateUserOptInSettingsDelegate == null))
        {
            this.onEndAddUpdateUserOptInSettingsDelegate = new EndOperationDelegate(this.OnEndAddUpdateUserOptInSettings);
        }
        if ((this.onAddUpdateUserOptInSettingsCompletedDelegate == null))
        {
            this.onAddUpdateUserOptInSettingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUpdateUserOptInSettingsCompleted);
        }
        base.InvokeAsync(this.onBeginAddUpdateUserOptInSettingsDelegate, new object[] {
                    settings,
                    loginData}, this.onEndAddUpdateUserOptInSettingsDelegate, this.onAddUpdateUserOptInSettingsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginAddUserClinicForNotifications(int[] ClinicIDs, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginAddUserClinicForNotifications(ClinicIDs, loginData, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    int IOMGITService.EndAddUserClinicForNotifications(System.IAsyncResult result)
    {
        return base.Channel.EndAddUserClinicForNotifications(result);
    }
    
    private System.IAsyncResult OnBeginAddUserClinicForNotifications(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        int[] ClinicIDs = ((int[])(inValues[0]));
        OMGITWebServices.OMGLoginData loginData = ((OMGITWebServices.OMGLoginData)(inValues[1]));
        return ((IOMGITService)(this)).BeginAddUserClinicForNotifications(ClinicIDs, loginData, callback, asyncState);
    }
    
    private object[] OnEndAddUserClinicForNotifications(System.IAsyncResult result)
    {
        int retVal = ((IOMGITService)(this)).EndAddUserClinicForNotifications(result);
        return new object[] {
                retVal};
    }
    
    private void OnAddUserClinicForNotificationsCompleted(object state)
    {
        if ((this.AddUserClinicForNotificationsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.AddUserClinicForNotificationsCompleted(this, new AddUserClinicForNotificationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void AddUserClinicForNotificationsAsync(int[] ClinicIDs, OMGITWebServices.OMGLoginData loginData)
    {
        this.AddUserClinicForNotificationsAsync(ClinicIDs, loginData, null);
    }
    
    public void AddUserClinicForNotificationsAsync(int[] ClinicIDs, OMGITWebServices.OMGLoginData loginData, object userState)
    {
        if ((this.onBeginAddUserClinicForNotificationsDelegate == null))
        {
            this.onBeginAddUserClinicForNotificationsDelegate = new BeginOperationDelegate(this.OnBeginAddUserClinicForNotifications);
        }
        if ((this.onEndAddUserClinicForNotificationsDelegate == null))
        {
            this.onEndAddUserClinicForNotificationsDelegate = new EndOperationDelegate(this.OnEndAddUserClinicForNotifications);
        }
        if ((this.onAddUserClinicForNotificationsCompletedDelegate == null))
        {
            this.onAddUserClinicForNotificationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUserClinicForNotificationsCompleted);
        }
        base.InvokeAsync(this.onBeginAddUserClinicForNotificationsDelegate, new object[] {
                    ClinicIDs,
                    loginData}, this.onEndAddUserClinicForNotificationsDelegate, this.onAddUserClinicForNotificationsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginAddExternalUserClinicForNotifications(int[] ClinicIDs, string NotifyUserName, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginAddExternalUserClinicForNotifications(ClinicIDs, NotifyUserName, loginData, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    int IOMGITService.EndAddExternalUserClinicForNotifications(System.IAsyncResult result)
    {
        return base.Channel.EndAddExternalUserClinicForNotifications(result);
    }
    
    private System.IAsyncResult OnBeginAddExternalUserClinicForNotifications(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        int[] ClinicIDs = ((int[])(inValues[0]));
        string NotifyUserName = ((string)(inValues[1]));
        OMGITWebServices.OMGLoginData loginData = ((OMGITWebServices.OMGLoginData)(inValues[2]));
        return ((IOMGITService)(this)).BeginAddExternalUserClinicForNotifications(ClinicIDs, NotifyUserName, loginData, callback, asyncState);
    }
    
    private object[] OnEndAddExternalUserClinicForNotifications(System.IAsyncResult result)
    {
        int retVal = ((IOMGITService)(this)).EndAddExternalUserClinicForNotifications(result);
        return new object[] {
                retVal};
    }
    
    private void OnAddExternalUserClinicForNotificationsCompleted(object state)
    {
        if ((this.AddExternalUserClinicForNotificationsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.AddExternalUserClinicForNotificationsCompleted(this, new AddExternalUserClinicForNotificationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void AddExternalUserClinicForNotificationsAsync(int[] ClinicIDs, string NotifyUserName, OMGITWebServices.OMGLoginData loginData)
    {
        this.AddExternalUserClinicForNotificationsAsync(ClinicIDs, NotifyUserName, loginData, null);
    }
    
    public void AddExternalUserClinicForNotificationsAsync(int[] ClinicIDs, string NotifyUserName, OMGITWebServices.OMGLoginData loginData, object userState)
    {
        if ((this.onBeginAddExternalUserClinicForNotificationsDelegate == null))
        {
            this.onBeginAddExternalUserClinicForNotificationsDelegate = new BeginOperationDelegate(this.OnBeginAddExternalUserClinicForNotifications);
        }
        if ((this.onEndAddExternalUserClinicForNotificationsDelegate == null))
        {
            this.onEndAddExternalUserClinicForNotificationsDelegate = new EndOperationDelegate(this.OnEndAddExternalUserClinicForNotifications);
        }
        if ((this.onAddExternalUserClinicForNotificationsCompletedDelegate == null))
        {
            this.onAddExternalUserClinicForNotificationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddExternalUserClinicForNotificationsCompleted);
        }
        base.InvokeAsync(this.onBeginAddExternalUserClinicForNotificationsDelegate, new object[] {
                    ClinicIDs,
                    NotifyUserName,
                    loginData}, this.onEndAddExternalUserClinicForNotificationsDelegate, this.onAddExternalUserClinicForNotificationsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginAddUpdateExternalUserOptInSettings(OMGITWebServices.OMGNotifyUserOptInSettings settings, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginAddUpdateExternalUserOptInSettings(settings, loginData, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    int IOMGITService.EndAddUpdateExternalUserOptInSettings(System.IAsyncResult result)
    {
        return base.Channel.EndAddUpdateExternalUserOptInSettings(result);
    }
    
    private System.IAsyncResult OnBeginAddUpdateExternalUserOptInSettings(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGNotifyUserOptInSettings settings = ((OMGITWebServices.OMGNotifyUserOptInSettings)(inValues[0]));
        OMGITWebServices.OMGLoginData loginData = ((OMGITWebServices.OMGLoginData)(inValues[1]));
        return ((IOMGITService)(this)).BeginAddUpdateExternalUserOptInSettings(settings, loginData, callback, asyncState);
    }
    
    private object[] OnEndAddUpdateExternalUserOptInSettings(System.IAsyncResult result)
    {
        int retVal = ((IOMGITService)(this)).EndAddUpdateExternalUserOptInSettings(result);
        return new object[] {
                retVal};
    }
    
    private void OnAddUpdateExternalUserOptInSettingsCompleted(object state)
    {
        if ((this.AddUpdateExternalUserOptInSettingsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.AddUpdateExternalUserOptInSettingsCompleted(this, new AddUpdateExternalUserOptInSettingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void AddUpdateExternalUserOptInSettingsAsync(OMGITWebServices.OMGNotifyUserOptInSettings settings, OMGITWebServices.OMGLoginData loginData)
    {
        this.AddUpdateExternalUserOptInSettingsAsync(settings, loginData, null);
    }
    
    public void AddUpdateExternalUserOptInSettingsAsync(OMGITWebServices.OMGNotifyUserOptInSettings settings, OMGITWebServices.OMGLoginData loginData, object userState)
    {
        if ((this.onBeginAddUpdateExternalUserOptInSettingsDelegate == null))
        {
            this.onBeginAddUpdateExternalUserOptInSettingsDelegate = new BeginOperationDelegate(this.OnBeginAddUpdateExternalUserOptInSettings);
        }
        if ((this.onEndAddUpdateExternalUserOptInSettingsDelegate == null))
        {
            this.onEndAddUpdateExternalUserOptInSettingsDelegate = new EndOperationDelegate(this.OnEndAddUpdateExternalUserOptInSettings);
        }
        if ((this.onAddUpdateExternalUserOptInSettingsCompletedDelegate == null))
        {
            this.onAddUpdateExternalUserOptInSettingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUpdateExternalUserOptInSettingsCompleted);
        }
        base.InvokeAsync(this.onBeginAddUpdateExternalUserOptInSettingsDelegate, new object[] {
                    settings,
                    loginData}, this.onEndAddUpdateExternalUserOptInSettingsDelegate, this.onAddUpdateExternalUserOptInSettingsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginDeleteAllUserClinicForNotifications(OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginDeleteAllUserClinicForNotifications(loginData, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void IOMGITService.EndDeleteAllUserClinicForNotifications(System.IAsyncResult result)
    {
        base.Channel.EndDeleteAllUserClinicForNotifications(result);
    }
    
    private System.IAsyncResult OnBeginDeleteAllUserClinicForNotifications(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGLoginData loginData = ((OMGITWebServices.OMGLoginData)(inValues[0]));
        return ((IOMGITService)(this)).BeginDeleteAllUserClinicForNotifications(loginData, callback, asyncState);
    }
    
    private object[] OnEndDeleteAllUserClinicForNotifications(System.IAsyncResult result)
    {
        ((IOMGITService)(this)).EndDeleteAllUserClinicForNotifications(result);
        return null;
    }
    
    private void OnDeleteAllUserClinicForNotificationsCompleted(object state)
    {
        if ((this.DeleteAllUserClinicForNotificationsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.DeleteAllUserClinicForNotificationsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void DeleteAllUserClinicForNotificationsAsync(OMGITWebServices.OMGLoginData loginData)
    {
        this.DeleteAllUserClinicForNotificationsAsync(loginData, null);
    }
    
    public void DeleteAllUserClinicForNotificationsAsync(OMGITWebServices.OMGLoginData loginData, object userState)
    {
        if ((this.onBeginDeleteAllUserClinicForNotificationsDelegate == null))
        {
            this.onBeginDeleteAllUserClinicForNotificationsDelegate = new BeginOperationDelegate(this.OnBeginDeleteAllUserClinicForNotifications);
        }
        if ((this.onEndDeleteAllUserClinicForNotificationsDelegate == null))
        {
            this.onEndDeleteAllUserClinicForNotificationsDelegate = new EndOperationDelegate(this.OnEndDeleteAllUserClinicForNotifications);
        }
        if ((this.onDeleteAllUserClinicForNotificationsCompletedDelegate == null))
        {
            this.onDeleteAllUserClinicForNotificationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAllUserClinicForNotificationsCompleted);
        }
        base.InvokeAsync(this.onBeginDeleteAllUserClinicForNotificationsDelegate, new object[] {
                    loginData}, this.onEndDeleteAllUserClinicForNotificationsDelegate, this.onDeleteAllUserClinicForNotificationsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginDeleteAllExternalUserClinicForNotifications(string NotifyUserName, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginDeleteAllExternalUserClinicForNotifications(NotifyUserName, loginData, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void IOMGITService.EndDeleteAllExternalUserClinicForNotifications(System.IAsyncResult result)
    {
        base.Channel.EndDeleteAllExternalUserClinicForNotifications(result);
    }
    
    private System.IAsyncResult OnBeginDeleteAllExternalUserClinicForNotifications(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string NotifyUserName = ((string)(inValues[0]));
        OMGITWebServices.OMGLoginData loginData = ((OMGITWebServices.OMGLoginData)(inValues[1]));
        return ((IOMGITService)(this)).BeginDeleteAllExternalUserClinicForNotifications(NotifyUserName, loginData, callback, asyncState);
    }
    
    private object[] OnEndDeleteAllExternalUserClinicForNotifications(System.IAsyncResult result)
    {
        ((IOMGITService)(this)).EndDeleteAllExternalUserClinicForNotifications(result);
        return null;
    }
    
    private void OnDeleteAllExternalUserClinicForNotificationsCompleted(object state)
    {
        if ((this.DeleteAllExternalUserClinicForNotificationsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.DeleteAllExternalUserClinicForNotificationsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void DeleteAllExternalUserClinicForNotificationsAsync(string NotifyUserName, OMGITWebServices.OMGLoginData loginData)
    {
        this.DeleteAllExternalUserClinicForNotificationsAsync(NotifyUserName, loginData, null);
    }
    
    public void DeleteAllExternalUserClinicForNotificationsAsync(string NotifyUserName, OMGITWebServices.OMGLoginData loginData, object userState)
    {
        if ((this.onBeginDeleteAllExternalUserClinicForNotificationsDelegate == null))
        {
            this.onBeginDeleteAllExternalUserClinicForNotificationsDelegate = new BeginOperationDelegate(this.OnBeginDeleteAllExternalUserClinicForNotifications);
        }
        if ((this.onEndDeleteAllExternalUserClinicForNotificationsDelegate == null))
        {
            this.onEndDeleteAllExternalUserClinicForNotificationsDelegate = new EndOperationDelegate(this.OnEndDeleteAllExternalUserClinicForNotifications);
        }
        if ((this.onDeleteAllExternalUserClinicForNotificationsCompletedDelegate == null))
        {
            this.onDeleteAllExternalUserClinicForNotificationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAllExternalUserClinicForNotificationsCompleted);
        }
        base.InvokeAsync(this.onBeginDeleteAllExternalUserClinicForNotificationsDelegate, new object[] {
                    NotifyUserName,
                    loginData}, this.onEndDeleteAllExternalUserClinicForNotificationsDelegate, this.onDeleteAllExternalUserClinicForNotificationsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginDoesExternalUserExist(string NotifyUserName, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginDoesExternalUserExist(NotifyUserName, loginData, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    int IOMGITService.EndDoesExternalUserExist(System.IAsyncResult result)
    {
        return base.Channel.EndDoesExternalUserExist(result);
    }
    
    private System.IAsyncResult OnBeginDoesExternalUserExist(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string NotifyUserName = ((string)(inValues[0]));
        OMGITWebServices.OMGLoginData loginData = ((OMGITWebServices.OMGLoginData)(inValues[1]));
        return ((IOMGITService)(this)).BeginDoesExternalUserExist(NotifyUserName, loginData, callback, asyncState);
    }
    
    private object[] OnEndDoesExternalUserExist(System.IAsyncResult result)
    {
        int retVal = ((IOMGITService)(this)).EndDoesExternalUserExist(result);
        return new object[] {
                retVal};
    }
    
    private void OnDoesExternalUserExistCompleted(object state)
    {
        if ((this.DoesExternalUserExistCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.DoesExternalUserExistCompleted(this, new DoesExternalUserExistCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void DoesExternalUserExistAsync(string NotifyUserName, OMGITWebServices.OMGLoginData loginData)
    {
        this.DoesExternalUserExistAsync(NotifyUserName, loginData, null);
    }
    
    public void DoesExternalUserExistAsync(string NotifyUserName, OMGITWebServices.OMGLoginData loginData, object userState)
    {
        if ((this.onBeginDoesExternalUserExistDelegate == null))
        {
            this.onBeginDoesExternalUserExistDelegate = new BeginOperationDelegate(this.OnBeginDoesExternalUserExist);
        }
        if ((this.onEndDoesExternalUserExistDelegate == null))
        {
            this.onEndDoesExternalUserExistDelegate = new EndOperationDelegate(this.OnEndDoesExternalUserExist);
        }
        if ((this.onDoesExternalUserExistCompletedDelegate == null))
        {
            this.onDoesExternalUserExistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoesExternalUserExistCompleted);
        }
        base.InvokeAsync(this.onBeginDoesExternalUserExistDelegate, new object[] {
                    NotifyUserName,
                    loginData}, this.onEndDoesExternalUserExistDelegate, this.onDoesExternalUserExistCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginGetUserClinicsForNotifications(string NotifyUserName, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetUserClinicsForNotifications(NotifyUserName, loginData, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    int[] IOMGITService.EndGetUserClinicsForNotifications(System.IAsyncResult result)
    {
        return base.Channel.EndGetUserClinicsForNotifications(result);
    }
    
    private System.IAsyncResult OnBeginGetUserClinicsForNotifications(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string NotifyUserName = ((string)(inValues[0]));
        OMGITWebServices.OMGLoginData loginData = ((OMGITWebServices.OMGLoginData)(inValues[1]));
        return ((IOMGITService)(this)).BeginGetUserClinicsForNotifications(NotifyUserName, loginData, callback, asyncState);
    }
    
    private object[] OnEndGetUserClinicsForNotifications(System.IAsyncResult result)
    {
        int[] retVal = ((IOMGITService)(this)).EndGetUserClinicsForNotifications(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetUserClinicsForNotificationsCompleted(object state)
    {
        if ((this.GetUserClinicsForNotificationsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetUserClinicsForNotificationsCompleted(this, new GetUserClinicsForNotificationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetUserClinicsForNotificationsAsync(string NotifyUserName, OMGITWebServices.OMGLoginData loginData)
    {
        this.GetUserClinicsForNotificationsAsync(NotifyUserName, loginData, null);
    }
    
    public void GetUserClinicsForNotificationsAsync(string NotifyUserName, OMGITWebServices.OMGLoginData loginData, object userState)
    {
        if ((this.onBeginGetUserClinicsForNotificationsDelegate == null))
        {
            this.onBeginGetUserClinicsForNotificationsDelegate = new BeginOperationDelegate(this.OnBeginGetUserClinicsForNotifications);
        }
        if ((this.onEndGetUserClinicsForNotificationsDelegate == null))
        {
            this.onEndGetUserClinicsForNotificationsDelegate = new EndOperationDelegate(this.OnEndGetUserClinicsForNotifications);
        }
        if ((this.onGetUserClinicsForNotificationsCompletedDelegate == null))
        {
            this.onGetUserClinicsForNotificationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserClinicsForNotificationsCompleted);
        }
        base.InvokeAsync(this.onBeginGetUserClinicsForNotificationsDelegate, new object[] {
                    NotifyUserName,
                    loginData}, this.onEndGetUserClinicsForNotificationsDelegate, this.onGetUserClinicsForNotificationsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginGetExternalUserClinicsForNotifications(string NotifyUserName, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetExternalUserClinicsForNotifications(NotifyUserName, loginData, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    int[] IOMGITService.EndGetExternalUserClinicsForNotifications(System.IAsyncResult result)
    {
        return base.Channel.EndGetExternalUserClinicsForNotifications(result);
    }
    
    private System.IAsyncResult OnBeginGetExternalUserClinicsForNotifications(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string NotifyUserName = ((string)(inValues[0]));
        OMGITWebServices.OMGLoginData loginData = ((OMGITWebServices.OMGLoginData)(inValues[1]));
        return ((IOMGITService)(this)).BeginGetExternalUserClinicsForNotifications(NotifyUserName, loginData, callback, asyncState);
    }
    
    private object[] OnEndGetExternalUserClinicsForNotifications(System.IAsyncResult result)
    {
        int[] retVal = ((IOMGITService)(this)).EndGetExternalUserClinicsForNotifications(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetExternalUserClinicsForNotificationsCompleted(object state)
    {
        if ((this.GetExternalUserClinicsForNotificationsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetExternalUserClinicsForNotificationsCompleted(this, new GetExternalUserClinicsForNotificationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetExternalUserClinicsForNotificationsAsync(string NotifyUserName, OMGITWebServices.OMGLoginData loginData)
    {
        this.GetExternalUserClinicsForNotificationsAsync(NotifyUserName, loginData, null);
    }
    
    public void GetExternalUserClinicsForNotificationsAsync(string NotifyUserName, OMGITWebServices.OMGLoginData loginData, object userState)
    {
        if ((this.onBeginGetExternalUserClinicsForNotificationsDelegate == null))
        {
            this.onBeginGetExternalUserClinicsForNotificationsDelegate = new BeginOperationDelegate(this.OnBeginGetExternalUserClinicsForNotifications);
        }
        if ((this.onEndGetExternalUserClinicsForNotificationsDelegate == null))
        {
            this.onEndGetExternalUserClinicsForNotificationsDelegate = new EndOperationDelegate(this.OnEndGetExternalUserClinicsForNotifications);
        }
        if ((this.onGetExternalUserClinicsForNotificationsCompletedDelegate == null))
        {
            this.onGetExternalUserClinicsForNotificationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetExternalUserClinicsForNotificationsCompleted);
        }
        base.InvokeAsync(this.onBeginGetExternalUserClinicsForNotificationsDelegate, new object[] {
                    NotifyUserName,
                    loginData}, this.onEndGetExternalUserClinicsForNotificationsDelegate, this.onGetExternalUserClinicsForNotificationsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginGetListOfValidSendLocations(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetListOfValidSendLocations(name, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    string[] IOMGITService.EndGetListOfValidSendLocations(System.IAsyncResult result)
    {
        return base.Channel.EndGetListOfValidSendLocations(result);
    }
    
    private System.IAsyncResult OnBeginGetListOfValidSendLocations(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGLoginData name = ((OMGITWebServices.OMGLoginData)(inValues[0]));
        return ((IOMGITService)(this)).BeginGetListOfValidSendLocations(name, callback, asyncState);
    }
    
    private object[] OnEndGetListOfValidSendLocations(System.IAsyncResult result)
    {
        string[] retVal = ((IOMGITService)(this)).EndGetListOfValidSendLocations(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetListOfValidSendLocationsCompleted(object state)
    {
        if ((this.GetListOfValidSendLocationsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetListOfValidSendLocationsCompleted(this, new GetListOfValidSendLocationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetListOfValidSendLocationsAsync(OMGITWebServices.OMGLoginData name)
    {
        this.GetListOfValidSendLocationsAsync(name, null);
    }
    
    public void GetListOfValidSendLocationsAsync(OMGITWebServices.OMGLoginData name, object userState)
    {
        if ((this.onBeginGetListOfValidSendLocationsDelegate == null))
        {
            this.onBeginGetListOfValidSendLocationsDelegate = new BeginOperationDelegate(this.OnBeginGetListOfValidSendLocations);
        }
        if ((this.onEndGetListOfValidSendLocationsDelegate == null))
        {
            this.onEndGetListOfValidSendLocationsDelegate = new EndOperationDelegate(this.OnEndGetListOfValidSendLocations);
        }
        if ((this.onGetListOfValidSendLocationsCompletedDelegate == null))
        {
            this.onGetListOfValidSendLocationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetListOfValidSendLocationsCompleted);
        }
        base.InvokeAsync(this.onBeginGetListOfValidSendLocationsDelegate, new object[] {
                    name}, this.onEndGetListOfValidSendLocationsDelegate, this.onGetListOfValidSendLocationsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginGetNotificationAdmins(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetNotificationAdmins(name, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    string[] IOMGITService.EndGetNotificationAdmins(System.IAsyncResult result)
    {
        return base.Channel.EndGetNotificationAdmins(result);
    }
    
    private System.IAsyncResult OnBeginGetNotificationAdmins(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGLoginData name = ((OMGITWebServices.OMGLoginData)(inValues[0]));
        return ((IOMGITService)(this)).BeginGetNotificationAdmins(name, callback, asyncState);
    }
    
    private object[] OnEndGetNotificationAdmins(System.IAsyncResult result)
    {
        string[] retVal = ((IOMGITService)(this)).EndGetNotificationAdmins(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetNotificationAdminsCompleted(object state)
    {
        if ((this.GetNotificationAdminsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetNotificationAdminsCompleted(this, new GetNotificationAdminsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetNotificationAdminsAsync(OMGITWebServices.OMGLoginData name)
    {
        this.GetNotificationAdminsAsync(name, null);
    }
    
    public void GetNotificationAdminsAsync(OMGITWebServices.OMGLoginData name, object userState)
    {
        if ((this.onBeginGetNotificationAdminsDelegate == null))
        {
            this.onBeginGetNotificationAdminsDelegate = new BeginOperationDelegate(this.OnBeginGetNotificationAdmins);
        }
        if ((this.onEndGetNotificationAdminsDelegate == null))
        {
            this.onEndGetNotificationAdminsDelegate = new EndOperationDelegate(this.OnEndGetNotificationAdmins);
        }
        if ((this.onGetNotificationAdminsCompletedDelegate == null))
        {
            this.onGetNotificationAdminsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNotificationAdminsCompleted);
        }
        base.InvokeAsync(this.onBeginGetNotificationAdminsDelegate, new object[] {
                    name}, this.onEndGetNotificationAdminsDelegate, this.onGetNotificationAdminsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginSendOMGNotificationToLocations(OMGITWebServices.OMGLocationNotificationMessage msg, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginSendOMGNotificationToLocations(msg, loginData, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    int IOMGITService.EndSendOMGNotificationToLocations(System.IAsyncResult result)
    {
        return base.Channel.EndSendOMGNotificationToLocations(result);
    }
    
    private System.IAsyncResult OnBeginSendOMGNotificationToLocations(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGLocationNotificationMessage msg = ((OMGITWebServices.OMGLocationNotificationMessage)(inValues[0]));
        OMGITWebServices.OMGLoginData loginData = ((OMGITWebServices.OMGLoginData)(inValues[1]));
        return ((IOMGITService)(this)).BeginSendOMGNotificationToLocations(msg, loginData, callback, asyncState);
    }
    
    private object[] OnEndSendOMGNotificationToLocations(System.IAsyncResult result)
    {
        int retVal = ((IOMGITService)(this)).EndSendOMGNotificationToLocations(result);
        return new object[] {
                retVal};
    }
    
    private void OnSendOMGNotificationToLocationsCompleted(object state)
    {
        if ((this.SendOMGNotificationToLocationsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.SendOMGNotificationToLocationsCompleted(this, new SendOMGNotificationToLocationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void SendOMGNotificationToLocationsAsync(OMGITWebServices.OMGLocationNotificationMessage msg, OMGITWebServices.OMGLoginData loginData)
    {
        this.SendOMGNotificationToLocationsAsync(msg, loginData, null);
    }
    
    public void SendOMGNotificationToLocationsAsync(OMGITWebServices.OMGLocationNotificationMessage msg, OMGITWebServices.OMGLoginData loginData, object userState)
    {
        if ((this.onBeginSendOMGNotificationToLocationsDelegate == null))
        {
            this.onBeginSendOMGNotificationToLocationsDelegate = new BeginOperationDelegate(this.OnBeginSendOMGNotificationToLocations);
        }
        if ((this.onEndSendOMGNotificationToLocationsDelegate == null))
        {
            this.onEndSendOMGNotificationToLocationsDelegate = new EndOperationDelegate(this.OnEndSendOMGNotificationToLocations);
        }
        if ((this.onSendOMGNotificationToLocationsCompletedDelegate == null))
        {
            this.onSendOMGNotificationToLocationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendOMGNotificationToLocationsCompleted);
        }
        base.InvokeAsync(this.onBeginSendOMGNotificationToLocationsDelegate, new object[] {
                    msg,
                    loginData}, this.onEndSendOMGNotificationToLocationsDelegate, this.onSendOMGNotificationToLocationsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginSendTestNotificationToUser(OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginSendTestNotificationToUser(loginData, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    int IOMGITService.EndSendTestNotificationToUser(System.IAsyncResult result)
    {
        return base.Channel.EndSendTestNotificationToUser(result);
    }
    
    private System.IAsyncResult OnBeginSendTestNotificationToUser(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGLoginData loginData = ((OMGITWebServices.OMGLoginData)(inValues[0]));
        return ((IOMGITService)(this)).BeginSendTestNotificationToUser(loginData, callback, asyncState);
    }
    
    private object[] OnEndSendTestNotificationToUser(System.IAsyncResult result)
    {
        int retVal = ((IOMGITService)(this)).EndSendTestNotificationToUser(result);
        return new object[] {
                retVal};
    }
    
    private void OnSendTestNotificationToUserCompleted(object state)
    {
        if ((this.SendTestNotificationToUserCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.SendTestNotificationToUserCompleted(this, new SendTestNotificationToUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void SendTestNotificationToUserAsync(OMGITWebServices.OMGLoginData loginData)
    {
        this.SendTestNotificationToUserAsync(loginData, null);
    }
    
    public void SendTestNotificationToUserAsync(OMGITWebServices.OMGLoginData loginData, object userState)
    {
        if ((this.onBeginSendTestNotificationToUserDelegate == null))
        {
            this.onBeginSendTestNotificationToUserDelegate = new BeginOperationDelegate(this.OnBeginSendTestNotificationToUser);
        }
        if ((this.onEndSendTestNotificationToUserDelegate == null))
        {
            this.onEndSendTestNotificationToUserDelegate = new EndOperationDelegate(this.OnEndSendTestNotificationToUser);
        }
        if ((this.onSendTestNotificationToUserCompletedDelegate == null))
        {
            this.onSendTestNotificationToUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendTestNotificationToUserCompleted);
        }
        base.InvokeAsync(this.onBeginSendTestNotificationToUserDelegate, new object[] {
                    loginData}, this.onEndSendTestNotificationToUserDelegate, this.onSendTestNotificationToUserCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginAcknowledgeNotification(string msgConfirmID, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginAcknowledgeNotification(msgConfirmID, loginData, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    OMGITWebServices.OMGReturnMessage IOMGITService.EndAcknowledgeNotification(System.IAsyncResult result)
    {
        return base.Channel.EndAcknowledgeNotification(result);
    }
    
    private System.IAsyncResult OnBeginAcknowledgeNotification(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string msgConfirmID = ((string)(inValues[0]));
        OMGITWebServices.OMGLoginData loginData = ((OMGITWebServices.OMGLoginData)(inValues[1]));
        return ((IOMGITService)(this)).BeginAcknowledgeNotification(msgConfirmID, loginData, callback, asyncState);
    }
    
    private object[] OnEndAcknowledgeNotification(System.IAsyncResult result)
    {
        OMGITWebServices.OMGReturnMessage retVal = ((IOMGITService)(this)).EndAcknowledgeNotification(result);
        return new object[] {
                retVal};
    }
    
    private void OnAcknowledgeNotificationCompleted(object state)
    {
        if ((this.AcknowledgeNotificationCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.AcknowledgeNotificationCompleted(this, new AcknowledgeNotificationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void AcknowledgeNotificationAsync(string msgConfirmID, OMGITWebServices.OMGLoginData loginData)
    {
        this.AcknowledgeNotificationAsync(msgConfirmID, loginData, null);
    }
    
    public void AcknowledgeNotificationAsync(string msgConfirmID, OMGITWebServices.OMGLoginData loginData, object userState)
    {
        if ((this.onBeginAcknowledgeNotificationDelegate == null))
        {
            this.onBeginAcknowledgeNotificationDelegate = new BeginOperationDelegate(this.OnBeginAcknowledgeNotification);
        }
        if ((this.onEndAcknowledgeNotificationDelegate == null))
        {
            this.onEndAcknowledgeNotificationDelegate = new EndOperationDelegate(this.OnEndAcknowledgeNotification);
        }
        if ((this.onAcknowledgeNotificationCompletedDelegate == null))
        {
            this.onAcknowledgeNotificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAcknowledgeNotificationCompleted);
        }
        base.InvokeAsync(this.onBeginAcknowledgeNotificationDelegate, new object[] {
                    msgConfirmID,
                    loginData}, this.onEndAcknowledgeNotificationDelegate, this.onAcknowledgeNotificationCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginSendNotification(OMGITWebServices.OMGPushNotificationSendData sendData, OMGITWebServices.OMGLoginData sender, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginSendNotification(sendData, sender, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    OMGITWebServices.OMGReturnMessage IOMGITService.EndSendNotification(System.IAsyncResult result)
    {
        return base.Channel.EndSendNotification(result);
    }
    
    private System.IAsyncResult OnBeginSendNotification(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGPushNotificationSendData sendData = ((OMGITWebServices.OMGPushNotificationSendData)(inValues[0]));
        OMGITWebServices.OMGLoginData sender = ((OMGITWebServices.OMGLoginData)(inValues[1]));
        return ((IOMGITService)(this)).BeginSendNotification(sendData, sender, callback, asyncState);
    }
    
    private object[] OnEndSendNotification(System.IAsyncResult result)
    {
        OMGITWebServices.OMGReturnMessage retVal = ((IOMGITService)(this)).EndSendNotification(result);
        return new object[] {
                retVal};
    }
    
    private void OnSendNotificationCompleted(object state)
    {
        if ((this.SendNotificationCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.SendNotificationCompleted(this, new SendNotificationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void SendNotificationAsync(OMGITWebServices.OMGPushNotificationSendData sendData, OMGITWebServices.OMGLoginData sender)
    {
        this.SendNotificationAsync(sendData, sender, null);
    }
    
    public void SendNotificationAsync(OMGITWebServices.OMGPushNotificationSendData sendData, OMGITWebServices.OMGLoginData sender, object userState)
    {
        if ((this.onBeginSendNotificationDelegate == null))
        {
            this.onBeginSendNotificationDelegate = new BeginOperationDelegate(this.OnBeginSendNotification);
        }
        if ((this.onEndSendNotificationDelegate == null))
        {
            this.onEndSendNotificationDelegate = new EndOperationDelegate(this.OnEndSendNotification);
        }
        if ((this.onSendNotificationCompletedDelegate == null))
        {
            this.onSendNotificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendNotificationCompleted);
        }
        base.InvokeAsync(this.onBeginSendNotificationDelegate, new object[] {
                    sendData,
                    sender}, this.onEndSendNotificationDelegate, this.onSendNotificationCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginReport_GetUserSignUpsWithTableID(OMGITWebServices.OMGLoginData sender, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginReport_GetUserSignUpsWithTableID(sender, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserSignupReportRow> IOMGITService.EndReport_GetUserSignUpsWithTableID(System.IAsyncResult result)
    {
        return base.Channel.EndReport_GetUserSignUpsWithTableID(result);
    }
    
    private System.IAsyncResult OnBeginReport_GetUserSignUpsWithTableID(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGLoginData sender = ((OMGITWebServices.OMGLoginData)(inValues[0]));
        return ((IOMGITService)(this)).BeginReport_GetUserSignUpsWithTableID(sender, callback, asyncState);
    }
    
    private object[] OnEndReport_GetUserSignUpsWithTableID(System.IAsyncResult result)
    {
        System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserSignupReportRow> retVal = ((IOMGITService)(this)).EndReport_GetUserSignUpsWithTableID(result);
        return new object[] {
                retVal};
    }
    
    private void OnReport_GetUserSignUpsWithTableIDCompleted(object state)
    {
        if ((this.Report_GetUserSignUpsWithTableIDCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.Report_GetUserSignUpsWithTableIDCompleted(this, new Report_GetUserSignUpsWithTableIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void Report_GetUserSignUpsWithTableIDAsync(OMGITWebServices.OMGLoginData sender)
    {
        this.Report_GetUserSignUpsWithTableIDAsync(sender, null);
    }
    
    public void Report_GetUserSignUpsWithTableIDAsync(OMGITWebServices.OMGLoginData sender, object userState)
    {
        if ((this.onBeginReport_GetUserSignUpsWithTableIDDelegate == null))
        {
            this.onBeginReport_GetUserSignUpsWithTableIDDelegate = new BeginOperationDelegate(this.OnBeginReport_GetUserSignUpsWithTableID);
        }
        if ((this.onEndReport_GetUserSignUpsWithTableIDDelegate == null))
        {
            this.onEndReport_GetUserSignUpsWithTableIDDelegate = new EndOperationDelegate(this.OnEndReport_GetUserSignUpsWithTableID);
        }
        if ((this.onReport_GetUserSignUpsWithTableIDCompletedDelegate == null))
        {
            this.onReport_GetUserSignUpsWithTableIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReport_GetUserSignUpsWithTableIDCompleted);
        }
        base.InvokeAsync(this.onBeginReport_GetUserSignUpsWithTableIDDelegate, new object[] {
                    sender}, this.onEndReport_GetUserSignUpsWithTableIDDelegate, this.onReport_GetUserSignUpsWithTableIDCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginReport_GetExternalUserSignUpsWithTableID(OMGITWebServices.OMGLoginData sender, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginReport_GetExternalUserSignUpsWithTableID(sender, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserSignupReportRow> IOMGITService.EndReport_GetExternalUserSignUpsWithTableID(System.IAsyncResult result)
    {
        return base.Channel.EndReport_GetExternalUserSignUpsWithTableID(result);
    }
    
    private System.IAsyncResult OnBeginReport_GetExternalUserSignUpsWithTableID(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        OMGITWebServices.OMGLoginData sender = ((OMGITWebServices.OMGLoginData)(inValues[0]));
        return ((IOMGITService)(this)).BeginReport_GetExternalUserSignUpsWithTableID(sender, callback, asyncState);
    }
    
    private object[] OnEndReport_GetExternalUserSignUpsWithTableID(System.IAsyncResult result)
    {
        System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserSignupReportRow> retVal = ((IOMGITService)(this)).EndReport_GetExternalUserSignUpsWithTableID(result);
        return new object[] {
                retVal};
    }
    
    private void OnReport_GetExternalUserSignUpsWithTableIDCompleted(object state)
    {
        if ((this.Report_GetExternalUserSignUpsWithTableIDCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.Report_GetExternalUserSignUpsWithTableIDCompleted(this, new Report_GetExternalUserSignUpsWithTableIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void Report_GetExternalUserSignUpsWithTableIDAsync(OMGITWebServices.OMGLoginData sender)
    {
        this.Report_GetExternalUserSignUpsWithTableIDAsync(sender, null);
    }
    
    public void Report_GetExternalUserSignUpsWithTableIDAsync(OMGITWebServices.OMGLoginData sender, object userState)
    {
        if ((this.onBeginReport_GetExternalUserSignUpsWithTableIDDelegate == null))
        {
            this.onBeginReport_GetExternalUserSignUpsWithTableIDDelegate = new BeginOperationDelegate(this.OnBeginReport_GetExternalUserSignUpsWithTableID);
        }
        if ((this.onEndReport_GetExternalUserSignUpsWithTableIDDelegate == null))
        {
            this.onEndReport_GetExternalUserSignUpsWithTableIDDelegate = new EndOperationDelegate(this.OnEndReport_GetExternalUserSignUpsWithTableID);
        }
        if ((this.onReport_GetExternalUserSignUpsWithTableIDCompletedDelegate == null))
        {
            this.onReport_GetExternalUserSignUpsWithTableIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReport_GetExternalUserSignUpsWithTableIDCompleted);
        }
        base.InvokeAsync(this.onBeginReport_GetExternalUserSignUpsWithTableIDDelegate, new object[] {
                    sender}, this.onEndReport_GetExternalUserSignUpsWithTableIDDelegate, this.onReport_GetExternalUserSignUpsWithTableIDCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginReport_GetUserNotificationHistory(string ReportUserName, OMGITWebServices.OMGLoginData sender, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginReport_GetUserNotificationHistory(ReportUserName, sender, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserNotificationHistoryRow> IOMGITService.EndReport_GetUserNotificationHistory(System.IAsyncResult result)
    {
        return base.Channel.EndReport_GetUserNotificationHistory(result);
    }
    
    private System.IAsyncResult OnBeginReport_GetUserNotificationHistory(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string ReportUserName = ((string)(inValues[0]));
        OMGITWebServices.OMGLoginData sender = ((OMGITWebServices.OMGLoginData)(inValues[1]));
        return ((IOMGITService)(this)).BeginReport_GetUserNotificationHistory(ReportUserName, sender, callback, asyncState);
    }
    
    private object[] OnEndReport_GetUserNotificationHistory(System.IAsyncResult result)
    {
        System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserNotificationHistoryRow> retVal = ((IOMGITService)(this)).EndReport_GetUserNotificationHistory(result);
        return new object[] {
                retVal};
    }
    
    private void OnReport_GetUserNotificationHistoryCompleted(object state)
    {
        if ((this.Report_GetUserNotificationHistoryCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.Report_GetUserNotificationHistoryCompleted(this, new Report_GetUserNotificationHistoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void Report_GetUserNotificationHistoryAsync(string ReportUserName, OMGITWebServices.OMGLoginData sender)
    {
        this.Report_GetUserNotificationHistoryAsync(ReportUserName, sender, null);
    }
    
    public void Report_GetUserNotificationHistoryAsync(string ReportUserName, OMGITWebServices.OMGLoginData sender, object userState)
    {
        if ((this.onBeginReport_GetUserNotificationHistoryDelegate == null))
        {
            this.onBeginReport_GetUserNotificationHistoryDelegate = new BeginOperationDelegate(this.OnBeginReport_GetUserNotificationHistory);
        }
        if ((this.onEndReport_GetUserNotificationHistoryDelegate == null))
        {
            this.onEndReport_GetUserNotificationHistoryDelegate = new EndOperationDelegate(this.OnEndReport_GetUserNotificationHistory);
        }
        if ((this.onReport_GetUserNotificationHistoryCompletedDelegate == null))
        {
            this.onReport_GetUserNotificationHistoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReport_GetUserNotificationHistoryCompleted);
        }
        base.InvokeAsync(this.onBeginReport_GetUserNotificationHistoryDelegate, new object[] {
                    ReportUserName,
                    sender}, this.onEndReport_GetUserNotificationHistoryDelegate, this.onReport_GetUserNotificationHistoryCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IOMGITService.BeginRemoveUserFromClinicNotifications(string UserToRemove, int TableID, OMGITWebServices.OMGLoginData sender, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginRemoveUserFromClinicNotifications(UserToRemove, TableID, sender, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    int IOMGITService.EndRemoveUserFromClinicNotifications(System.IAsyncResult result)
    {
        return base.Channel.EndRemoveUserFromClinicNotifications(result);
    }
    
    private System.IAsyncResult OnBeginRemoveUserFromClinicNotifications(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string UserToRemove = ((string)(inValues[0]));
        int TableID = ((int)(inValues[1]));
        OMGITWebServices.OMGLoginData sender = ((OMGITWebServices.OMGLoginData)(inValues[2]));
        return ((IOMGITService)(this)).BeginRemoveUserFromClinicNotifications(UserToRemove, TableID, sender, callback, asyncState);
    }
    
    private object[] OnEndRemoveUserFromClinicNotifications(System.IAsyncResult result)
    {
        int retVal = ((IOMGITService)(this)).EndRemoveUserFromClinicNotifications(result);
        return new object[] {
                retVal};
    }
    
    private void OnRemoveUserFromClinicNotificationsCompleted(object state)
    {
        if ((this.RemoveUserFromClinicNotificationsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.RemoveUserFromClinicNotificationsCompleted(this, new RemoveUserFromClinicNotificationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void RemoveUserFromClinicNotificationsAsync(string UserToRemove, int TableID, OMGITWebServices.OMGLoginData sender)
    {
        this.RemoveUserFromClinicNotificationsAsync(UserToRemove, TableID, sender, null);
    }
    
    public void RemoveUserFromClinicNotificationsAsync(string UserToRemove, int TableID, OMGITWebServices.OMGLoginData sender, object userState)
    {
        if ((this.onBeginRemoveUserFromClinicNotificationsDelegate == null))
        {
            this.onBeginRemoveUserFromClinicNotificationsDelegate = new BeginOperationDelegate(this.OnBeginRemoveUserFromClinicNotifications);
        }
        if ((this.onEndRemoveUserFromClinicNotificationsDelegate == null))
        {
            this.onEndRemoveUserFromClinicNotificationsDelegate = new EndOperationDelegate(this.OnEndRemoveUserFromClinicNotifications);
        }
        if ((this.onRemoveUserFromClinicNotificationsCompletedDelegate == null))
        {
            this.onRemoveUserFromClinicNotificationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveUserFromClinicNotificationsCompleted);
        }
        base.InvokeAsync(this.onBeginRemoveUserFromClinicNotificationsDelegate, new object[] {
                    UserToRemove,
                    TableID,
                    sender}, this.onEndRemoveUserFromClinicNotificationsDelegate, this.onRemoveUserFromClinicNotificationsCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
    }
    
    private object[] OnEndOpen(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
        return null;
    }
    
    private void OnOpenCompleted(object state)
    {
        if ((this.OpenCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void OpenAsync()
    {
        this.OpenAsync(null);
    }
    
    public void OpenAsync(object userState)
    {
        if ((this.onBeginOpenDelegate == null))
        {
            this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
        }
        if ((this.onEndOpenDelegate == null))
        {
            this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
        }
        if ((this.onOpenCompletedDelegate == null))
        {
            this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
        }
        base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
    }
    
    private object[] OnEndClose(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
        return null;
    }
    
    private void OnCloseCompleted(object state)
    {
        if ((this.CloseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void CloseAsync()
    {
        this.CloseAsync(null);
    }
    
    public void CloseAsync(object userState)
    {
        if ((this.onBeginCloseDelegate == null))
        {
            this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
        }
        if ((this.onEndCloseDelegate == null))
        {
            this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
        }
        if ((this.onCloseCompletedDelegate == null))
        {
            this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
        }
        base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
    }
    
    protected override IOMGITService CreateChannel()
    {
        return new OMGITServiceClientChannel(this);
    }
    
    private class OMGITServiceClientChannel : ChannelBase<IOMGITService>, IOMGITService
    {
        
        public OMGITServiceClientChannel(System.ServiceModel.ClientBase<IOMGITService> client) : 
                base(client)
        {
        }
        
        public System.IAsyncResult BeginLogin(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = name;
            System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
            return _result;
        }
        
        public OMGITWebServices.OMGReturnMessage EndLogin(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            OMGITWebServices.OMGReturnMessage _result = ((OMGITWebServices.OMGReturnMessage)(base.EndInvoke("Login", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginLogout(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = name;
            System.IAsyncResult _result = base.BeginInvoke("Logout", _args, callback, asyncState);
            return _result;
        }
        
        public OMGITWebServices.OMGReturnMessage EndLogout(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            OMGITWebServices.OMGReturnMessage _result = ((OMGITWebServices.OMGReturnMessage)(base.EndInvoke("Logout", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginRegisterForNotifications(OMGITWebServices.OMGInstallationData name, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = name;
            System.IAsyncResult _result = base.BeginInvoke("RegisterForNotifications", _args, callback, asyncState);
            return _result;
        }
        
        public OMGITWebServices.OMGReturnMessage EndRegisterForNotifications(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            OMGITWebServices.OMGReturnMessage _result = ((OMGITWebServices.OMGReturnMessage)(base.EndInvoke("RegisterForNotifications", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginTestSendNotification(OMGITWebServices.OMGAdminTestSendData name, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = name;
            System.IAsyncResult _result = base.BeginInvoke("TestSendNotification", _args, callback, asyncState);
            return _result;
        }
        
        public OMGITWebServices.OMGReturnMessage EndTestSendNotification(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            OMGITWebServices.OMGReturnMessage _result = ((OMGITWebServices.OMGReturnMessage)(base.EndInvoke("TestSendNotification", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginValidateAuthenticationToken(OMGITWebServices.OMGAuthTokenData name, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = name;
            System.IAsyncResult _result = base.BeginInvoke("ValidateAuthenticationToken", _args, callback, asyncState);
            return _result;
        }
        
        public OMGITWebServices.OMGReturnMessage EndValidateAuthenticationToken(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            OMGITWebServices.OMGReturnMessage _result = ((OMGITWebServices.OMGReturnMessage)(base.EndInvoke("ValidateAuthenticationToken", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginAddLogMessageTickerApp(string logmessage, string msgdetail, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = logmessage;
            _args[1] = msgdetail;
            System.IAsyncResult _result = base.BeginInvoke("AddLogMessageTickerApp", _args, callback, asyncState);
            return _result;
        }
        
        public void EndAddLogMessageTickerApp(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("AddLogMessageTickerApp", _args, result);
        }
        
        public System.IAsyncResult BeginGetRecentMessages(System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[0];
            System.IAsyncResult _result = base.BeginInvoke("GetRecentMessages", _args, callback, asyncState);
            return _result;
        }
        
        public string[] EndGetRecentMessages(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            string[] _result = ((string[])(base.EndInvoke("GetRecentMessages", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetValidSendLocations(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = name;
            System.IAsyncResult _result = base.BeginInvoke("GetValidSendLocations", _args, callback, asyncState);
            return _result;
        }
        
        public System.Collections.Generic.Dictionary<int, string> EndGetValidSendLocations(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetValidSendLocations", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetValidLocations(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = name;
            System.IAsyncResult _result = base.BeginInvoke("GetValidLocations", _args, callback, asyncState);
            return _result;
        }
        
        public System.Collections.Generic.Dictionary<int, string> EndGetValidLocations(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetValidLocations", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetCarrierTextMappings(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = name;
            System.IAsyncResult _result = base.BeginInvoke("GetCarrierTextMappings", _args, callback, asyncState);
            return _result;
        }
        
        public System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGNotifyCarrierTextMapping> EndGetCarrierTextMappings(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGNotifyCarrierTextMapping> _result = ((System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGNotifyCarrierTextMapping>)(base.EndInvoke("GetCarrierTextMappings", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetUserOptInSettings(string NotifyUserName, OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = NotifyUserName;
            _args[1] = name;
            System.IAsyncResult _result = base.BeginInvoke("GetUserOptInSettings", _args, callback, asyncState);
            return _result;
        }
        
        public OMGITWebServices.OMGNotifyUserOptInSettings EndGetUserOptInSettings(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            OMGITWebServices.OMGNotifyUserOptInSettings _result = ((OMGITWebServices.OMGNotifyUserOptInSettings)(base.EndInvoke("GetUserOptInSettings", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetExternalUserOptInSettings(string NotifyUserName, OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = NotifyUserName;
            _args[1] = name;
            System.IAsyncResult _result = base.BeginInvoke("GetExternalUserOptInSettings", _args, callback, asyncState);
            return _result;
        }
        
        public OMGITWebServices.OMGNotifyUserOptInSettings EndGetExternalUserOptInSettings(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            OMGITWebServices.OMGNotifyUserOptInSettings _result = ((OMGITWebServices.OMGNotifyUserOptInSettings)(base.EndInvoke("GetExternalUserOptInSettings", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginAddUpdateUserOptInSettings(OMGITWebServices.OMGNotifyUserOptInSettings settings, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = settings;
            _args[1] = loginData;
            System.IAsyncResult _result = base.BeginInvoke("AddUpdateUserOptInSettings", _args, callback, asyncState);
            return _result;
        }
        
        public int EndAddUpdateUserOptInSettings(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            int _result = ((int)(base.EndInvoke("AddUpdateUserOptInSettings", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginAddUserClinicForNotifications(int[] ClinicIDs, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = ClinicIDs;
            _args[1] = loginData;
            System.IAsyncResult _result = base.BeginInvoke("AddUserClinicForNotifications", _args, callback, asyncState);
            return _result;
        }
        
        public int EndAddUserClinicForNotifications(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            int _result = ((int)(base.EndInvoke("AddUserClinicForNotifications", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginAddExternalUserClinicForNotifications(int[] ClinicIDs, string NotifyUserName, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[3];
            _args[0] = ClinicIDs;
            _args[1] = NotifyUserName;
            _args[2] = loginData;
            System.IAsyncResult _result = base.BeginInvoke("AddExternalUserClinicForNotifications", _args, callback, asyncState);
            return _result;
        }
        
        public int EndAddExternalUserClinicForNotifications(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            int _result = ((int)(base.EndInvoke("AddExternalUserClinicForNotifications", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginAddUpdateExternalUserOptInSettings(OMGITWebServices.OMGNotifyUserOptInSettings settings, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = settings;
            _args[1] = loginData;
            System.IAsyncResult _result = base.BeginInvoke("AddUpdateExternalUserOptInSettings", _args, callback, asyncState);
            return _result;
        }
        
        public int EndAddUpdateExternalUserOptInSettings(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            int _result = ((int)(base.EndInvoke("AddUpdateExternalUserOptInSettings", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginDeleteAllUserClinicForNotifications(OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = loginData;
            System.IAsyncResult _result = base.BeginInvoke("DeleteAllUserClinicForNotifications", _args, callback, asyncState);
            return _result;
        }
        
        public void EndDeleteAllUserClinicForNotifications(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("DeleteAllUserClinicForNotifications", _args, result);
        }
        
        public System.IAsyncResult BeginDeleteAllExternalUserClinicForNotifications(string NotifyUserName, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = NotifyUserName;
            _args[1] = loginData;
            System.IAsyncResult _result = base.BeginInvoke("DeleteAllExternalUserClinicForNotifications", _args, callback, asyncState);
            return _result;
        }
        
        public void EndDeleteAllExternalUserClinicForNotifications(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("DeleteAllExternalUserClinicForNotifications", _args, result);
        }
        
        public System.IAsyncResult BeginDoesExternalUserExist(string NotifyUserName, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = NotifyUserName;
            _args[1] = loginData;
            System.IAsyncResult _result = base.BeginInvoke("DoesExternalUserExist", _args, callback, asyncState);
            return _result;
        }
        
        public int EndDoesExternalUserExist(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            int _result = ((int)(base.EndInvoke("DoesExternalUserExist", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetUserClinicsForNotifications(string NotifyUserName, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = NotifyUserName;
            _args[1] = loginData;
            System.IAsyncResult _result = base.BeginInvoke("GetUserClinicsForNotifications", _args, callback, asyncState);
            return _result;
        }
        
        public int[] EndGetUserClinicsForNotifications(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            int[] _result = ((int[])(base.EndInvoke("GetUserClinicsForNotifications", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetExternalUserClinicsForNotifications(string NotifyUserName, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = NotifyUserName;
            _args[1] = loginData;
            System.IAsyncResult _result = base.BeginInvoke("GetExternalUserClinicsForNotifications", _args, callback, asyncState);
            return _result;
        }
        
        public int[] EndGetExternalUserClinicsForNotifications(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            int[] _result = ((int[])(base.EndInvoke("GetExternalUserClinicsForNotifications", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetListOfValidSendLocations(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = name;
            System.IAsyncResult _result = base.BeginInvoke("GetListOfValidSendLocations", _args, callback, asyncState);
            return _result;
        }
        
        public string[] EndGetListOfValidSendLocations(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            string[] _result = ((string[])(base.EndInvoke("GetListOfValidSendLocations", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetNotificationAdmins(OMGITWebServices.OMGLoginData name, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = name;
            System.IAsyncResult _result = base.BeginInvoke("GetNotificationAdmins", _args, callback, asyncState);
            return _result;
        }
        
        public string[] EndGetNotificationAdmins(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            string[] _result = ((string[])(base.EndInvoke("GetNotificationAdmins", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginSendOMGNotificationToLocations(OMGITWebServices.OMGLocationNotificationMessage msg, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = msg;
            _args[1] = loginData;
            System.IAsyncResult _result = base.BeginInvoke("SendOMGNotificationToLocations", _args, callback, asyncState);
            return _result;
        }
        
        public int EndSendOMGNotificationToLocations(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            int _result = ((int)(base.EndInvoke("SendOMGNotificationToLocations", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginSendTestNotificationToUser(OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = loginData;
            System.IAsyncResult _result = base.BeginInvoke("SendTestNotificationToUser", _args, callback, asyncState);
            return _result;
        }
        
        public int EndSendTestNotificationToUser(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            int _result = ((int)(base.EndInvoke("SendTestNotificationToUser", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginAcknowledgeNotification(string msgConfirmID, OMGITWebServices.OMGLoginData loginData, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = msgConfirmID;
            _args[1] = loginData;
            System.IAsyncResult _result = base.BeginInvoke("AcknowledgeNotification", _args, callback, asyncState);
            return _result;
        }
        
        public OMGITWebServices.OMGReturnMessage EndAcknowledgeNotification(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            OMGITWebServices.OMGReturnMessage _result = ((OMGITWebServices.OMGReturnMessage)(base.EndInvoke("AcknowledgeNotification", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginSendNotification(OMGITWebServices.OMGPushNotificationSendData sendData, OMGITWebServices.OMGLoginData sender, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = sendData;
            _args[1] = sender;
            System.IAsyncResult _result = base.BeginInvoke("SendNotification", _args, callback, asyncState);
            return _result;
        }
        
        public OMGITWebServices.OMGReturnMessage EndSendNotification(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            OMGITWebServices.OMGReturnMessage _result = ((OMGITWebServices.OMGReturnMessage)(base.EndInvoke("SendNotification", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginReport_GetUserSignUpsWithTableID(OMGITWebServices.OMGLoginData sender, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = sender;
            System.IAsyncResult _result = base.BeginInvoke("Report_GetUserSignUpsWithTableID", _args, callback, asyncState);
            return _result;
        }
        
        public System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserSignupReportRow> EndReport_GetUserSignUpsWithTableID(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserSignupReportRow> _result = ((System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserSignupReportRow>)(base.EndInvoke("Report_GetUserSignUpsWithTableID", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginReport_GetExternalUserSignUpsWithTableID(OMGITWebServices.OMGLoginData sender, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = sender;
            System.IAsyncResult _result = base.BeginInvoke("Report_GetExternalUserSignUpsWithTableID", _args, callback, asyncState);
            return _result;
        }
        
        public System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserSignupReportRow> EndReport_GetExternalUserSignUpsWithTableID(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserSignupReportRow> _result = ((System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserSignupReportRow>)(base.EndInvoke("Report_GetExternalUserSignUpsWithTableID", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginReport_GetUserNotificationHistory(string ReportUserName, OMGITWebServices.OMGLoginData sender, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = ReportUserName;
            _args[1] = sender;
            System.IAsyncResult _result = base.BeginInvoke("Report_GetUserNotificationHistory", _args, callback, asyncState);
            return _result;
        }
        
        public System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserNotificationHistoryRow> EndReport_GetUserNotificationHistory(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserNotificationHistoryRow> _result = ((System.Collections.Generic.Dictionary<int, OMGITWebServices.OMGUserNotificationHistoryRow>)(base.EndInvoke("Report_GetUserNotificationHistory", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginRemoveUserFromClinicNotifications(string UserToRemove, int TableID, OMGITWebServices.OMGLoginData sender, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[3];
            _args[0] = UserToRemove;
            _args[1] = TableID;
            _args[2] = sender;
            System.IAsyncResult _result = base.BeginInvoke("RemoveUserFromClinicNotifications", _args, callback, asyncState);
            return _result;
        }
        
        public int EndRemoveUserFromClinicNotifications(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            int _result = ((int)(base.EndInvoke("RemoveUserFromClinicNotifications", _args, result)));
            return _result;
        }
    }
}
